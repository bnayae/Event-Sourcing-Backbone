<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Weknow.EventSource.Backbone.Consumers.Contracts</name>
    </assembly>
    <members>
        <member name="T:Weknow.EventSource.Backbone.Ack">
            <summary>
            Acknowledge context
            </summary>
            <seealso cref="T:System.IAsyncDisposable" />
        </member>
        <member name="M:Weknow.EventSource.Backbone.Ack.#cctor">
            <summary>
            Initializes the <see cref="T:Weknow.EventSource.Backbone.Ack"/> class.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Ack.Set(Weknow.EventSource.Backbone.IAck)">
            <summary>
            Sets ack.
            </summary>
            <param name="ack"></param>
            <returns></returns>
        </member>
        <member name="P:Weknow.EventSource.Backbone.Ack.Current">
            <summary>
            Gets the current.
            </summary>
        </member>
        <member name="T:Weknow.EventSource.Backbone.Ack.NOP">
            <summary>
            Empty implementation
            </summary>
            <seealso cref="T:Weknow.EventSource.Backbone.IAck" />
        </member>
        <member name="M:Weknow.EventSource.Backbone.Ack.NOP.AckAsync">
            <summary>
            Preform acknowledge (which should prevent the
            message from process again by the consumer)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Ack.NOP.CancelAsync">
            <summary>
            Cancel acknowledge (will happen on error in order to avoid ack on succeed)
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Ack.NOP.DisposeAsync">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously.
            </summary>
            <returns>
            A task that represents the asynchronous dispose operation.
            </returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.Ack.Scope">
            <summary>
            Disposable scope
            </summary>
            <seealso cref="T:System.IAsyncDisposable" />
        </member>
        <member name="M:Weknow.EventSource.Backbone.Ack.Scope.#ctor(Weknow.EventSource.Backbone.IAck)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="ack">The ack.</param>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Ack.Scope.DisposeAsync">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously.
            </summary>
            <returns>
            A task that represents the asynchronous dispose operation.
            </returns>
        </member>
        <member name="F:Weknow.EventSource.Backbone.AckBehavior.OnSucceed">
            <summary>
            Automatic acknowledge when execute without exception.
            </summary>
        </member>
        <member name="F:Weknow.EventSource.Backbone.AckBehavior.OnFinally">
            <summary>
            Automatic acknowledge when execute complete (whether it succeed or having exception, like finaly) .
            </summary>
        </member>
        <member name="F:Weknow.EventSource.Backbone.AckBehavior.Manual">
            <summary>
            Ignored expected to be handle elsewhere.
            </summary>
        </member>
        <member name="T:Weknow.EventSource.Backbone.AckOnce">
            <summary>
            Preform acknowledge (which should prevent the 
            message from process again by the consumer)
            </summary>
            <seealso cref="T:System.IAsyncDisposable" />
        </member>
        <member name="M:Weknow.EventSource.Backbone.AckOnce.#ctor(System.Func{System.Threading.Tasks.ValueTask},Weknow.EventSource.Backbone.AckBehavior,Microsoft.Extensions.Logging.ILogger,System.Func{System.Threading.Tasks.ValueTask})">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="ackAsync">The ack.</param>
            <param name="cancelAsync">The cancel.</param>
            <param name="behavior">The behavior.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Weknow.EventSource.Backbone.AckOnce.AckAsync">
            <summary>
            Preform acknowledge (which should prevent the 
            message from process again by the consumer)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.AckOnce.CancelAsync">
            <summary>
            Cancel acknowledge (will happen on error in order to avoid ack on succeed)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.AckOnce.DisposeAsync">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously.
            </summary>
            <returns>
            A task that represents the asynchronous dispose operation.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Weknow.EventSource.Backbone.IAck">
            <summary>
            Preform acknowledge (which should prevent the 
            message from process again by the consumer)
            </summary>
            <seealso cref="T:System.IAsyncDisposable" />
        </member>
        <member name="M:Weknow.EventSource.Backbone.IAck.AckAsync">
            <summary>
            Preform acknowledge (which should prevent the 
            message from process again by the consumer)
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.IAck.CancelAsync">
            <summary>
            Cancel acknowledge (will happen on error in order to avoid ack on succeed)
            </summary>
            <returns></returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.Building.IConsumerEnvironmentBuilder">
            <summary>
            Event Source producer builder.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.IConsumerEnvironmentBuilder.Environment(System.String)">
            <summary>
            Include the environment as prefix of the stream key.
            for example: production:partition-name:shard-name
            </summary>
            <param name="environment">The environment.</param>
            <returns></returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.Building.IConsumerFilterBuilder">
            <summary>
            Event Source producer builder.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.IConsumerFilterBuilder.FromShard(System.String)">
            <summary>
            Register raw interceptor.
            Intercept the consumer side execution before de-serialization.
            </summary>
            <param name="sourceShard">
            Specify the event source shard.
            Shard is a unique source name 
            which used for direct message channeling (routing).</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.IConsumerFilterBuilder.RegisterTags(System.String[])">
            <summary>
            Register tag's channels, enable the consumer
            to get data from multiple sources (shards).
            For example: assuming that each order flow is written to
            unique source (shard).
            Register to ORDER tag will route all shards which holding 
            messages with ORDER tag to the consume.
            </summary>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.IConsumerFilterBuilder.RegisterTags(System.Collections.IEnumerable[])">
            <summary>
            Register tag's channels, enable the consumer
            to get data from multiple sources (shards).
            For example: assuming that each order flow is written to
            unique source (shard).
            Register to ORDER tag will route all shards which holding 
            messages with ORDER tag to the consume.
            </summary>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.Building.IConsumerHooksBuilder">
            <summary>
            Event Source producer builder.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.IConsumerHooksBuilder.WithCancellation(System.Threading.CancellationToken)">
            <summary>
            Withes the cancellation token.
            </summary>
            <param name="cancellation">The cancellation.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.IConsumerHooksBuilder.RegisterInterceptor(Weknow.EventSource.Backbone.IConsumerInterceptor)">
            <summary>
            Register raw interceptor.
            Intercept the consumer side execution before de-serialization.
            </summary>
            <param name="interceptorData">The interceptor data as the interceptor defined in the producer stage.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.IConsumerHooksBuilder.RegisterInterceptor(Weknow.EventSource.Backbone.IConsumerAsyncInterceptor)">
            <summary>
            Register raw interceptor.
            Intercept the consumer side execution before de-serialization.
            </summary>
            <param name="interceptorData">The interceptor data as the interceptor defined in the producer stage.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.IConsumerHooksBuilder.RegisterSegmentationStrategy(Weknow.EventSource.Backbone.IConsumerSegmentationStrategy)">
            <summary>
            Responsible of building instance from segmented data.
            Segmented data is how the producer sending its raw data to
            the consumer. It's in a form of dictionary when
            keys represent the different segments
            and the value represent serialized form of the segment's data.
            </summary>
            <param name="segmentationStrategy">The segmentation strategy.</param>
            <returns></returns>
            <example>
            Examples for segments can be driven from regulation like
            GDPR (personal, non-personal data),
            Technical vs Business aspects, etc.
            </example>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.IConsumerHooksBuilder.RegisterSegmentationStrategy(Weknow.EventSource.Backbone.IConsumerAsyncSegmentationStrategy)">
            <summary>
            Responsible of building instance from segmented data.
            Segmented data is how the producer sending its raw data to
            the consumer. It's in a form of dictionary when
            keys represent the different segments
            and the value represent serialized form of the segment's data.
            </summary>
            <param name="segmentationStrategy">The segmentation strategy.</param>
            <returns></returns>
            <example>
            Examples for segments can be driven from regulation like
            GDPR (personal, non-personal data),
            Technical vs Business aspects, etc.
            </example>
        </member>
        <member name="T:Weknow.EventSource.Backbone.Building.IConsumerOptionsBuilder">
            <summary>
            Enable configuration.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.IConsumerOptionsBuilder.WithOptions(System.Func{Weknow.EventSource.Backbone.ConsumerOptions,Weknow.EventSource.Backbone.ConsumerOptions})">
            <summary>
            Tune configuration.
            </summary>
            <param name="optionsStrategy">The options strategy.</param>
            <returns></returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.Building.IConsumerPartitionBuilder">
            <summary>
            Event Source producer builder.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.IConsumerPartitionBuilder.Partition(System.String)">
            <summary>
            Partition key represent logical group of 
            event source shards.
            For example assuming each ORDERING flow can have its 
            own messaging sequence, yet can live concurrency with 
            other ORDER's sequences.
            The partition will let consumer the option to be notify and
            consume multiple shards from single consumer.
            This way the consumer can handle all orders in
            central place without affecting sequence of specific order 
            flow or limiting the throughput.
            </summary>
            <param name="partition">The partition key.</param>
            <returns></returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.Building.IConsumerReceiver">
            <summary>
            Receive data (on demand data query).
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.IConsumerReceiver.GetByIdAsync(Weknow.EventSource.Backbone.EventKey,System.Threading.CancellationToken)">
            <summary>
            Gets data by id.
            </summary>
            <param name="entryId">The entry identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.Building.IConsumerShardBuilder">
            <summary>
            Event Source producer builder.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.IConsumerShardBuilder.Shard(System.String)">
            <summary>
            Shard key represent physical sequence.
            On the consumer side shard is optional
            for listening on a physical source rather on the entire partition.
            Use same shard when order is matter.
            For example: assuming each ORDERING flow can have its 
            own messaging sequence, in this case you can split each 
            ORDER into different shard and gain performance bust..
            </summary>
            <param name="shardKey">The shard key.</param>
            <returns></returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.Building.IConsumerSubscribeBuilder">
            <summary>
            Event Source producer builder.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.IConsumerSubscribeBuilder.BuildReceiver">
            <summary>
            Build receiver (on demand data query).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.IConsumerSubscribeBuilder.Subscribe(Weknow.EventSource.Backbone.ISubscriptionBridge[])">
            <summary>
            Subscribe consumer.
            </summary>
            <param name="handlers">Per operation invocation handler, handle methods calls.</param>
            <returns>
            Remove subscription.
            keeping the disposable will prevent the consumer to be collected
            by th GC (when the behavior don't indicate to hook it until cancellation or dispose).
            </returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.IConsumerSubscribeBuilder.Subscribe(System.Collections.Generic.IEnumerable{Weknow.EventSource.Backbone.ISubscriptionBridge},System.String,System.String)">
            <summary>
            Subscribe consumer.
            </summary>
            <param name="handlers">Per operation invocation handler, handle methods calls.</param>
            <param name="consumerGroup">Consumer Group allow a group of clients to cooperate
            consuming a different portion of the same stream of messages</param>
            <param name="consumerName">Optional Name of the consumer.
            Can use for observability.</param>
            <returns>
            Remove subscription.
            keeping the disposable will prevent the consumer to be collected
            by th GC (when the behavior don't indicate to hook it until cancellation or dispose).
            </returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.IConsumerSubscribeBuilder.Subscribe(Weknow.EventSource.Backbone.ISubscriptionBridge,System.String,System.String)">
            <summary>
            Subscribe consumer.
            </summary>
            <param name="handler">Per operation invocation handler, handle methods calls.</param>
            <param name="consumerGroup">Consumer Group allow a group of clients to cooperate
            consuming a different portion of the same stream of messages</param>
            <param name="consumerName">Optional Name of the consumer.
            Can use for observability.</param>
            <returns>
            Remove subscription.
            keeping the disposable will prevent the consumer to be collected
            by th GC (when the behavior don't indicate to hook it until cancellation or dispose).
            </returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.IConsumerSubscribeBuilder.Subscribe(System.Func{Weknow.EventSource.Backbone.Announcement,Weknow.EventSource.Backbone.IConsumerBridge,System.Threading.Tasks.Task}[])">
            <summary>
            Subscribe consumer.
            </summary>
            <param name="handlers">Per operation invocation handler, handle methods calls.</param>
            <returns>
            Remove subscription.
            keeping the disposable will prevent the consumer to be collected
            by th GC (when the behavior don't indicate to hook it until cancellation or dispose).
            </returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.IConsumerSubscribeBuilder.Subscribe(System.Collections.Generic.IEnumerable{System.Func{Weknow.EventSource.Backbone.Announcement,Weknow.EventSource.Backbone.IConsumerBridge,System.Threading.Tasks.Task}},System.String,System.String)">
            <summary>
            Subscribe consumer.
            </summary>
            <param name="handlers">Per operation invocation handler, handle methods calls.</param>
            <param name="consumerGroup">Consumer Group allow a group of clients to cooperate
            consuming a different portion of the same stream of messages</param>
            <param name="consumerName">Optional Name of the consumer.
            Can use for observability.</param>
            <returns>
            Remove subscription.
            keeping the disposable will prevent the consumer to be collected
            by th GC (when the behavior don't indicate to hook it until cancellation or dispose).
            </returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.IConsumerSubscribeBuilder.Subscribe(System.Func{Weknow.EventSource.Backbone.Announcement,Weknow.EventSource.Backbone.IConsumerBridge,System.Threading.Tasks.Task},System.String,System.String)">
            <summary>
            Subscribe consumer.
            </summary>
            <param name="handler">Per operation invocation handler, handle methods calls.</param>
            <param name="consumerGroup">Consumer Group allow a group of clients to cooperate
            consuming a different portion of the same stream of messages</param>
            <param name="consumerName">Optional Name of the consumer.
            Can use for observability.</param>
            <returns>
            Remove subscription.
            keeping the disposable will prevent the consumer to be collected
            by th GC (when the behavior don't indicate to hook it until cancellation or dispose).
            </returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.Building.ConsumerInterceptorBridge">
            <summary>
            Bridge segmentation
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.ConsumerInterceptorBridge.#ctor(Weknow.EventSource.Backbone.IConsumerInterceptor)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="sync">The synchronize.</param>
        </member>
        <member name="P:Weknow.EventSource.Backbone.Building.ConsumerInterceptorBridge.Weknow#EventSource#Backbone#IInterceptorName#InterceptorName">
            <summary>
            Unique name which represent the correlation
            between the consumer and consumer interceptor.
            It's recommended to use URL format.
            </summary>
        </member>
        <member name="T:Weknow.EventSource.Backbone.Building.ConsumerSegmentationStrategyBridge">
            <summary>
            Bridge segmentation
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.ConsumerSegmentationStrategyBridge.#ctor(Weknow.EventSource.Backbone.IConsumerSegmentationStrategy)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="sync">The synchronize.</param>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.ConsumerSegmentationStrategyBridge.Weknow#EventSource#Backbone#IConsumerAsyncSegmentationStrategy#TryUnclassifyAsync``1(Weknow.EventSource.Backbone.Bucket,System.String,System.String,Weknow.EventSource.Backbone.EventSourceOptions)">
            <summary>
            Unclassify segmented data into an instance.
            Segments is how the producer sending its raw data to
            the consumer. It's in a form of dictionary when
            keys represent the different segments
            and the value represent serialized form of the segment's data.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="segments">The segments which was collect so far.
            It start as Empty and flow though all the registered segmentation strategies.</param>
            <param name="operation">The operation's key which represent the method call at the
            producer proxy.
            This way you can segment same type into different slot.</param>
            <param name="argumentName">Name of the argument.</param>
            <param name="options">The options.</param>
            <returns>
            Materialization of the segments.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <example>
            Examples for segments can be driven from regulation like
            GDPR (personal, non-personal data),
            Technical vs Business aspects, etc.
            </example>
        </member>
        <member name="T:Weknow.EventSource.Backbone.IConsumerLoggerBuilder">
            <summary>
            Event Source producer builder.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.IConsumerLoggerBuilder.WithLogger(Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Attach logger.
            </summary>
            <param name="logger">The logger.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.IConsumerLoggerBuilder.WithResiliencePolicy(Polly.AsyncPolicy)">
            <summary>
            Set resilience policy
            </summary>
            <param name="policy">The policy.</param>
            <returns></returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.IConsumerStorageStrategyWithFilter">
            <summary>
            Responsible to load information from storage.
            The information can be either Segmentation or Interception.
            When adding it via the builder it can be arrange in a chain in order of having
            'Chain of Responsibility' for saving different parts into different storage (For example GDPR's PII).
            Alternative, chain can serve as a cache layer.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.IConsumerStorageStrategyWithFilter.IsOfTargetType(Weknow.EventSource.Backbone.EventBucketCategories)">
            <summary>
            Determines whether is of the right target type.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="T:Weknow.EventSource.Backbone.IConsumerStoreStrategyBuilder">
            <summary>
            Enable configuration.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.IConsumerStoreStrategyBuilder.AddStorageStrategyFactory(System.Func{Microsoft.Extensions.Logging.ILogger,System.Threading.Tasks.ValueTask{Weknow.EventSource.Backbone.IConsumerStorageStrategy}},Weknow.EventSource.Backbone.EventBucketCategories)">
            <summary>
            Adds the storage strategy (Segment / Interceptions).
            Will use default storage (REDIS Hash) when empty.
            When adding more than one it will to all, act as a fall-back (first win, can use for caching).
            It important the consumer's storage will be in sync with this setting.
            </summary>
            <param name="storageStrategy">Storage strategy provider.</param>
            <param name="targetType">Type of the target.</param>
            <returns></returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.IConsumerBuilder">
            <summary>
            Event Source Consumer builder.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.IConsumerBuilder.UseChannel(System.Func{Microsoft.Extensions.Logging.ILogger,Weknow.EventSource.Backbone.IConsumerChannelProvider})">
            <summary>
            Choose the communication channel provider.
            </summary>
            <param name="channel">The channel provider.</param>
            <returns></returns>
        </member>
        <member name="P:Weknow.EventSource.Backbone.IConsumerLifetime.Completion">
            <summary>
            Represent the consuming completion..
            </summary>
        </member>
        <member name="T:Weknow.EventSource.Backbone.IConsumerPlan">
            <summary>
            The actual concrete plan
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.IConsumerPlan.Channel">
            <summary>
            Gets a communication channel provider factory.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.IConsumerPlan.StorageStrategiesAsync">
            <summary>
            Gets the storage strategies.
            </summary>
        </member>
        <member name="T:Weknow.EventSource.Backbone.IConsumerPlanBase">
            <summary>
            Common plan properties
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.IConsumerPlanBase.Environment">
            <summary>
            Environment (part of the stream key).
            </summary>
            <value>
            The partition.
            </value>
        </member>
        <member name="P:Weknow.EventSource.Backbone.IConsumerPlanBase.Partition">
            <summary>
            Partition key represent logical group of 
            event source shards.
            For example assuming each ORDERING flow can have its 
            own messaging sequence, yet can live concurrency with 
            other ORDER's sequences.
            The partition will let consumer the option to be notify and
            consume multiple shards from single consumer.
            This way the consumer can handle all orders in
            central place without affecting sequence of specific order 
            flow or limiting the throughput.
            </summary>
            <value>
            The partition.
            </value>
        </member>
        <member name="P:Weknow.EventSource.Backbone.IConsumerPlanBase.Shard">
            <summary>
            Shard key represent physical sequence.
            Use same shard when order is matter.
            For example: assuming each ORDERING flow can have its 
            own messaging sequence, in this case you can split each 
            ORDER into different shard and gain performance bust..
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.IConsumerPlanBase.ConsumerGroup">
            <summary>
            Gets the consumer group.
            Consumer Group allow a group of clients to cooperate
            consuming a different portion of the same stream of messages
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.IConsumerPlanBase.ConsumerName">
            <summary>
            Optional Name of the consumer.
            Can use for observability.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.IConsumerPlanBase.Cancellation">
            <summary>
            Gets the cancellation token.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.IConsumerPlanBase.Interceptors">
            <summary>
            Consumer interceptors (Timing: after serialization).
            </summary>
            <value>
            The interceptors.
            </value>
        </member>
        <member name="P:Weknow.EventSource.Backbone.IConsumerPlanBase.Logger">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.IConsumerPlanBase.Options">
            <summary>
            Gets the configuration.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.IConsumerPlanBase.SegmentationStrategies">
            <summary>
            Segmentation responsible of splitting an instance into segments.
            Segments is how the Consumer sending its raw data to
            the consumer. It's in a form of dictionary when
            keys represent the different segments
            and the value represent serialized form of the segment's data.
            </summary>
            <example>
            Examples for segments can be driven from regulation like
            GDPR (personal, non-personal data),
            Technical vs Business aspects, etc.
            </example>
        </member>
        <member name="M:Weknow.EventSource.Backbone.IConsumerPlanBase.WithShard(System.String)">
            <summary>
            Attach the shard.
            </summary>
            <param name="shard">The shard.</param>
            <returns></returns>
        </member>
        <member name="P:Weknow.EventSource.Backbone.IConsumerPlanBase.ResiliencePolicy">
            <summary>
            Gets or sets the invocation resilience policy.
            </summary>
        </member>
        <member name="T:Weknow.EventSource.Backbone.IConsumerPlanBaseExtensions">
            <summary>
            Metadata extensions
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.IConsumerPlanBaseExtensions.Key(Weknow.EventSource.Backbone.IConsumerPlanBase)">
            <summary>
            Gets the partition:shard as key.
            </summary>
        </member>
        <member name="T:Weknow.EventSource.Backbone.IConsumerPlanBuilder">
            <summary>
            Building phase of the plan
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.IConsumerPlanBuilder.ChannelFactory">
            <summary>
            Gets a communication channel provider factory.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.IConsumerPlanBuilder.StorageStrategyFactories">
            <summary>
            Gets the storage strategy factories.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.IConsumerPlanBuilder.Build">
            <summary>
            Builds the plan.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.ConsumerMetadata">
            <summary>
            Represent metadata of message (command / event) metadata of
            a communication channel (Pub/Sub, Event Source, REST, GraphQL).
            It represent the operation's intent or represent event.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ConsumerMetadata.Context">
            <summary>
            Get the metadata context
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerMetadata.#ctor(Weknow.EventSource.Backbone.Metadata,System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="metadata">The metadata.</param>
            <param name="consumingCancellation">The consuming cancellation
            (stop consuming call-back on cancellation).</param>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ConsumerMetadata.Metadata">
            <summary>
            Gets the metadata.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ConsumerMetadata.ConsumingCancellation">
            <summary>
            Cancel the consuming process.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerMetadata.op_Implicit(Weknow.EventSource.Backbone.ConsumerMetadata)~Weknow.EventSource.Backbone.Metadata">
            <summary>
            Performs an implicit conversion.
            </summary>
            <param name="instance">The instance.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ConsumerOptions.BatchSize">
            <summary>
            Gets the max batch size of reading messages per shard.
            The framework won't proceed to the next batch until all messages
            in the batch complete (or timeout when it set to acknowledge on timeout).
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ConsumerOptions.KeepAlive">
            <summary>
            Gets a value indicating whether to prevent the consumer
            from being collect by the GC.
            True by default, when you hold the subscription disposable
            you can set it to false. as long as you keeping the disposable in
            object that isn't candidate for being collected the consumer will stay alive.
            </summary>
            <value>
              <c>true</c> if [keep alive]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ConsumerOptions.AckBehavior">
            <summary>
            Gets the acknowledge behavior.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ConsumerOptions.MaxMessages">
            <summary>
            Gets the maximum messages to consume before detaching the subscription.
            any number > 0 will activate this mechanism.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ConsumerOptions.TraceAsParent">
            <summary>
            Gets the threshold duration which limit considering producer call as parent,
            Beyond this period the consumer span will refer the producer as Link (rather than parent).
            </summary>
        </member>
        <member name="T:Weknow.EventSource.Backbone.EventSourceConsumer">
            <summary>
            Base class for the consumer's code generator
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.EventSourceConsumer.GetParameterAsync``1(Weknow.EventSource.Backbone.Announcement,System.String,Weknow.EventSource.Backbone.IConsumerPlan)">
            <summary>
            Get parameter value from the announcement.
            </summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="arg">The argument.</param>
            <param name="argumentName">Name of the argument.</param>
            <param name="plan">The plan.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Weknow.EventSource.Backbone.IConsumerBridge.GetParameterAsync``1(Weknow.EventSource.Backbone.Announcement,System.String)">
            <summary>
            Gets the parameter value.
            </summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="arg">The argument.</param>
            <param name="argumentName">Name of the argument.</param>
            <returns></returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.IConsumerAsyncInterceptor">
            <summary>
            Consumer stage of an interception operation provider.
            It can be use for variety of responsibilities like 
            flowing auth context or traces, producing metrics, etc.
            </summary>
            <seealso cref="T:Weknow.EventSource.Backbone.IInterceptorName" />
        </member>
        <member name="M:Weknow.EventSource.Backbone.IConsumerAsyncInterceptor.InterceptAsync(Weknow.EventSource.Backbone.Metadata,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Interception operation.
            </summary>
            <param name="metadata">The metadata.</param>
            <param name="interceptorData">
            The interceptor data which sets on the 
            producer stage of the interception.</param>
        </member>
        <member name="T:Weknow.EventSource.Backbone.IConsumerInterceptor">
            <summary>
            Consumer stage of an interception operation provider.
            It can be use for variety of responsibilities like 
            flowing auth context or traces, producing metrics, etc.
            </summary>
            <seealso cref="T:Weknow.EventSource.Backbone.IInterceptorName" />
        </member>
        <member name="M:Weknow.EventSource.Backbone.IConsumerInterceptor.Intercept(Weknow.EventSource.Backbone.Metadata,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Interception operation.
            </summary>
            <param name="metadata">The metadata.</param>
            <param name="interceptorData">
            The interceptor data which sets on the 
            producer stage of the interception.</param>
        </member>
        <member name="T:Weknow.EventSource.Backbone.ISubscriptionBridge">
            <summary>
            Subscription Bridge convention
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ISubscriptionBridge.BridgeAsync(Weknow.EventSource.Backbone.Announcement,Weknow.EventSource.Backbone.IConsumerBridge)">
            <summary>
            Bridges to the subscriber implementation.
            </summary>
            <param name="announcement">The announcement.</param>
            <param name="consumerBridge">The consumer bridge.</param>
            <returns></returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.IConsumerChannelProvider">
            <summary>
            Channel provider responsible for passing the actual message 
            from producer to consumer. 
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.IConsumerChannelProvider.SubsribeAsync(Weknow.EventSource.Backbone.IConsumerPlan,System.Func{Weknow.EventSource.Backbone.Announcement,Weknow.EventSource.Backbone.IAck,System.Threading.Tasks.ValueTask},Weknow.EventSource.Backbone.ConsumerOptions,System.Threading.CancellationToken)">
            <summary>
            Subscribe to the channel for specific metadata.
            </summary>
            <param name="plan">The consumer plan.</param>
            <param name="func">The function.</param>
            <param name="options">The options.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            When completed
            </returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.IConsumerChannelProvider.GetByIdAsync(Weknow.EventSource.Backbone.EventKey,Weknow.EventSource.Backbone.IConsumerPlan,System.Threading.CancellationToken)">
            <summary>
            Gets the by identifier asynchronous.
            </summary>
            <param name="entryId">The entry identifier.</param>
            <param name="plan">The plan.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="readBufferSize">
            Size of the read buffer.
            How many items to read on a single iteration.
            </param>
            <returns></returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.IConsumerStorageStrategy">
            <summary>
            Responsible to load information from storage.
            The information can be either Segmentation or Interception.
            When adding it via the builder it can be arrange in a chain in order of having
            'Chain of Responsibility' for saving different parts into different storage (For example GDPR's PII).
            Alternative, chain can serve as a cache layer.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.IConsumerStorageStrategy.LoadBucketAsync(Weknow.EventSource.Backbone.Metadata,Weknow.EventSource.Backbone.Bucket,Weknow.EventSource.Backbone.EventBucketCategories,System.Func{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Load the bucket information.
            </summary>
            <param name="meta">The meta fetch provider.</param>
            <param name="prevBucket">The current bucket (previous item in the chain).</param>
            <param name="type">The type of the storage.</param>
            <param name="getProperty">The get property.</param>
            <param name="cancellation">The cancellation.</param>
            <returns>
            Either Segments or Interceptions.
            </returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.IConsumerAsyncSegmentationStrategy">
            <summary>
            Responsible of building instance from segmented data.
            Segmented data is how the producer sending its raw data to 
            the consumer. It's in a form of dictionary when 
            keys represent the different segments 
            and the value represent serialized form of the segment's data.
            </summary>
            <example>
            Examples for segments can be driven from regulation like
            GDPR (personal, non-personal data),
            Technical vs Business aspects, etc.
            </example>
        </member>
        <member name="M:Weknow.EventSource.Backbone.IConsumerAsyncSegmentationStrategy.TryUnclassifyAsync``1(Weknow.EventSource.Backbone.Bucket,System.String,System.String,Weknow.EventSource.Backbone.EventSourceOptions)">
            <summary>
            Unclassify segmented data into an instance.
            Segments is how the producer sending its raw data to
            the consumer. It's in a form of dictionary when
            keys represent the different segments
            and the value represent serialized form of the segment's data.
            </summary>
            <param name="segments">The segments which was collect so far.
            It start as Empty and flow though all the registered segmentation strategies.</param>
            <param name="operation">The operation's key which represent the method call at the
            producer proxy.
            This way you can segment same type into different slot.</param>
            <param name="argumentName">Name of the argument.</param>
            <param name="options">The options.</param>
            <returns>
            Materialization of the segments.
            </returns>
            <example>
            Examples for segments can be driven from regulation like
            GDPR (personal, non-personal data),
            Technical vs Business aspects, etc.
            </example>
        </member>
        <member name="T:Weknow.EventSource.Backbone.IConsumerSegmentationStrategy">
            <summary>
            Responsible of building instance from segmented data.
            Segmented data is how the producer sending its raw data to 
            the consumer. It's in a form of dictionary when 
            keys represent the different segments 
            and the value represent serialized form of the segment's data.
            </summary>
            <example>
            Examples for segments can be driven from regulation like
            GDPR (personal, non-personal data),
            Technical vs Business aspects, etc.
            </example>
        </member>
        <member name="M:Weknow.EventSource.Backbone.IConsumerSegmentationStrategy.TryUnclassify``1(Weknow.EventSource.Backbone.Bucket,System.String,System.String,Weknow.EventSource.Backbone.EventSourceOptions)">
            <summary>
            Unclassify segmented data into an instance.
            Segments is how the producer sending its raw data to
            the consumer. It's in a form of dictionary when
            keys represent the different segments
            and the value represent serialized form of the segment's data.
            </summary>
            <param name="segments">The segments which was collect so far.
            It start as Empty and flow though all the registered segmentation strategies.</param>
            <param name="operation">The operation's key which represent the method call at the
            producer proxy.
            This way you can segment same type into different slot.</param>
            <param name="argumentName">Name of the argument.</param>
            <param name="options">The options.</param>
            <returns>
            Materialization of the segments.
            </returns>
            <example>
            Examples for segments can be driven from regulation like
            GDPR (personal, non-personal data),
            Technical vs Business aspects, etc.
            </example>
        </member>
        <member name="M:Weknow.EventSource.Backbone.TelemetryrExtensions.ExtractSpan``1(Weknow.EventSource.Backbone.Metadata,``0,System.Func{``0,System.String,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Extract telemetry span's parent info
            </summary>
            <typeparam name="T"></typeparam>
            <param name="meta">The meta.</param>
            <param name="entries">The entries for extraction.</param>
            <param name="injectStrategy">The injection strategy.</param>
            <returns></returns>
        </member>
    </members>
</doc>
