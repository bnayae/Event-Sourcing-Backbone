<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Weknow.EventSource.Backbone.Consumers.Contracts</name>
    </assembly>
    <members>
        <member name="T:Weknow.EventSource.Backbone.Ackable`1">
            <summary>
            Represent acknowledge-able instance.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Ackable`1.#ctor">
            <summary>
            Prevents a default instance.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Ackable`1.#ctor(`0,Weknow.EventSource.Backbone.IAck)">
            <summary>
            Initializes a new instance        /// </summary>
            <param name="item">The item.</param>
            <param name="ack">The acknowledge handle (callback).</param>
        </member>
        <member name="P:Weknow.EventSource.Backbone.Ackable`1.Item">
            <summary>
            Gets the item data.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.Ackable`1.Ack">
            <summary>
            Send Acknowledge (some queue type [like event sourcing] 
            keep the item in the queue until it processed,
            the acknowledge will notify it that it can be delete).
            </summary>
            <returns></returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.IAck">
            <summary>
            Represent acknowledge trigger which will 
            set the status on the event as done and release 
            it for re-consuming.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.IAck.AckAsync">
            <summary>
            Acknowledge the asynchronous.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.IAck.AckAfter(System.TimeSpan)">
            <summary>
            Revokes the operation if not completed after a duration
            and avoid re-consume of the message (by same consumer signature).
            </summary>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="T:Weknow.EventSource.Backbone.Building.IConsumerFilterBuilder">
            <summary>
            Event Source producer builder.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.IConsumerFilterBuilder.FromShard(System.String)">
            <summary>
            Register raw interceptor.
            Intercept the consumer side execution before de-serialization.
            </summary>
            <param name="sourceShard">
            Specify the event source shard.
            Shard is a unique source name 
            which used for direct message channeling (routing).</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.IConsumerFilterBuilder.RegisterTags(System.String[])">
            <summary>
            Register tag's channels, enable the consumer
            to get data from multiple sources (shards).
            For example: assuming that each order flow is written to
            unique source (shard).
            Register to ORDER tag will route all shards which holding 
            messages with ORDER tag to the consume.
            </summary>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.IConsumerFilterBuilder.RegisterTags(System.Collections.IEnumerable[])">
            <summary>
            Register tag's channels, enable the consumer
            to get data from multiple sources (shards).
            For example: assuming that each order flow is written to
            unique source (shard).
            Register to ORDER tag will route all shards which holding 
            messages with ORDER tag to the consume.
            </summary>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.Building.IConsumerHooksBuilder">
            <summary>
            Event Source producer builder.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.IConsumerHooksBuilder.WithCancellation(System.Threading.CancellationToken)">
            <summary>
            Withes the cancellation token.
            </summary>
            <param name="cancellation">The cancellation.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.IConsumerHooksBuilder.RegisterInterceptor(Weknow.EventSource.Backbone.IConsumerInterceptor)">
            <summary>
            Register raw interceptor.
            Intercept the consumer side execution before de-serialization.
            </summary>
            <param name="interceptorData">The interceptor data as the interceptor defined in the producer stage.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.IConsumerHooksBuilder.RegisterInterceptor(Weknow.EventSource.Backbone.IConsumerAsyncInterceptor)">
            <summary>
            Register raw interceptor.
            Intercept the consumer side execution before de-serialization.
            </summary>
            <param name="interceptorData">The interceptor data as the interceptor defined in the producer stage.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.IConsumerHooksBuilder.RegisterSegmentationStrategy(Weknow.EventSource.Backbone.IConsumerSegmentationStrategy)">
            <summary>
            Responsible of building instance from segmented data.
            Segmented data is how the producer sending its raw data to
            the consumer. It's in a form of dictionary when
            keys represent the different segments
            and the value represent serialized form of the segment's data.
            </summary>
            <param name="segmentationStrategy">The segmentation strategy.</param>
            <returns></returns>
            <example>
            Examples for segments can be driven from regulation like
            GDPR (personal, non-personal data),
            Technical vs Business aspects, etc.
            </example>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.IConsumerHooksBuilder.RegisterSegmentationStrategy(Weknow.EventSource.Backbone.IConsumerAsyncSegmentationStrategy)">
            <summary>
            Responsible of building instance from segmented data.
            Segmented data is how the producer sending its raw data to
            the consumer. It's in a form of dictionary when
            keys represent the different segments
            and the value represent serialized form of the segment's data.
            </summary>
            <param name="segmentationStrategy">The segmentation strategy.</param>
            <returns></returns>
            <example>
            Examples for segments can be driven from regulation like
            GDPR (personal, non-personal data),
            Technical vs Business aspects, etc.
            </example>
        </member>
        <member name="T:Weknow.EventSource.Backbone.Building.IConsumerLoggerBuilder">
            <summary>
            Event Source producer builder.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.IConsumerLoggerBuilder.WithLogger(Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Attach logger.
            </summary>
            <param name="logger">The logger.</param>
            <returns></returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.Building.IConsumerOptionsBuilder">
            <summary>
            Enable configuration.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.IConsumerOptionsBuilder.WithOptions(Weknow.EventSource.Backbone.IEventSourceConsumerOptions)">
            <summary>
            Attach configuration.
            </summary>
        </member>
        <member name="T:Weknow.EventSource.Backbone.Building.IConsumerPartitionBuilder">
            <summary>
            Event Source producer builder.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.IConsumerPartitionBuilder.Partition(System.String)">
            <summary>
            Partition key represent logical group of 
            event source shards.
            For example assuming each ORDERING flow can have its 
            own messaging sequence, yet can live concurrency with 
            other ORDER's sequences.
            The partition will let consumer the option to be notify and
            consume multiple shards from single consumer.
            This way the consumer can handle all orders in
            central place without affecting sequence of specific order 
            flow or limiting the throughput.
            </summary>
            <param name="partition">The partition key.</param>
            <returns></returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.Building.IConsumerShardBuilder">
            <summary>
            Event Source producer builder.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.IConsumerShardBuilder.Shard(System.String)">
            <summary>
            Shard key represent physical sequence.
            On the consumer side shard is optional
            for listening on a physical source rather on the entire partition.
            Use same shard when order is matter.
            For example: assuming each ORDERING flow can have its 
            own messaging sequence, in this case you can split each 
            ORDER into different shard and gain performance bust..
            </summary>
            <param name="shardKey">The shard key.</param>
            <returns></returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.Building.IConsumerSubscribeBuilder">
            <summary>
            Event Source producer builder.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.IConsumerSubscribeBuilder.Subscribe``1(System.Func{Weknow.EventSource.Backbone.ConsumerMetadata,``0},System.String,System.String)">
            <summary>
            Subscribe consumer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="factory">The factory.</param>
            <param name="consumerGroup">Consumer Group allow a group of clients to cooperate
            consuming a different portion of the same stream of messages</param>
            <param name="consumerName">
            Optional Name of the consumer.
            Can use for observability.
            </param>
            <returns>
            Remove subscription.
            keeping the disposable will prevent the consumer to be collected
            by th GC (when the behavior don't indicate to hook it until cancellation or dispose).
            </returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.Building.ConsumerInterceptorBridge">
            <summary>
            Bridge segmentation
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.ConsumerInterceptorBridge.#ctor(Weknow.EventSource.Backbone.IConsumerInterceptor)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="sync">The synchronize.</param>
        </member>
        <member name="P:Weknow.EventSource.Backbone.Building.ConsumerInterceptorBridge.Weknow#EventSource#Backbone#IInterceptorName#InterceptorName">
            <summary>
            Unique name which represent the correlation
            between the consumer and consumer interceptor.
            It's recommended to use URL format.
            </summary>
        </member>
        <member name="T:Weknow.EventSource.Backbone.Building.ConsumerSegmentationStrategyBridge">
            <summary>
            Bridge segmentation
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.ConsumerSegmentationStrategyBridge.#ctor(Weknow.EventSource.Backbone.IConsumerSegmentationStrategy)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="sync">The synchronize.</param>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.ConsumerSegmentationStrategyBridge.Weknow#EventSource#Backbone#IConsumerAsyncSegmentationStrategy#TryUnclassifyAsync``1(Weknow.EventSource.Backbone.Bucket,System.String,System.String,Weknow.EventSource.Backbone.IEventSourceOptions)">
            <summary>
            Unclassify segmented data into an instance.
            Segments is how the producer sending its raw data to
            the consumer. It's in a form of dictionary when
            keys represent the different segments
            and the value represent serialized form of the segment's data.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="segments">The segments which was collect so far.
            It start as Empty and flow though all the registered segmentation strategies.</param>
            <param name="operation">The operation's key which represent the method call at the
            producer proxy.
            This way you can segment same type into different slot.</param>
            <param name="argumentName">Name of the argument.</param>
            <param name="options">The options.</param>
            <returns>
            Materialization of the segments.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <example>
            Examples for segments can be driven from regulation like
            GDPR (personal, non-personal data),
            Technical vs Business aspects, etc.
            </example>
        </member>
        <member name="T:Weknow.EventSource.Backbone.IConsumerBuilder">
            <summary>
            Event Source Consumer builder.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.IConsumerBuilder.UseChannel(Weknow.EventSource.Backbone.IConsumerChannelProvider)">
            <summary>
            Choose the communication channel provider.
            </summary>
            <param name="channel">The channel provider.</param>
            <returns></returns>
        </member>
        <member name="P:Weknow.EventSource.Backbone.IConsumerPlan.Partition">
            <summary>
            Partition key represent logical group of 
            event source shards.
            For example assuming each ORDERING flow can have its 
            own messaging sequence, yet can live concurrency with 
            other ORDER's sequences.
            The partition will let consumer the option to be notify and
            consume multiple shards from single consumer.
            This way the consumer can handle all orders in
            central place without affecting sequence of specific order 
            flow or limiting the throughput.
            </summary>
            <value>
            The partition.
            </value>
        </member>
        <member name="P:Weknow.EventSource.Backbone.IConsumerPlan.Shard">
            <summary>
            Shard key represent physical sequence.
            Use same shard when order is matter.
            For example: assuming each ORDERING flow can have its 
            own messaging sequence, in this case you can split each 
            ORDER into different shard and gain performance bust..
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.IConsumerPlan.ConsumerGroup">
            <summary>
            Gets the consumer group.
            Consumer Group allow a group of clients to cooperate
            consuming a different portion of the same stream of messages
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.IConsumerPlan.ConsumerName">
            <summary>
            Optional Name of the consumer.
            Can use for observability.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.IConsumerPlan.Cancellation">
            <summary>
            Gets the cancellation token.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.IConsumerPlan.Channel">
            <summary>
            Gets the communication channel provider.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.IConsumerPlan.Interceptors">
            <summary>
            Consumer interceptors (Timing: after serialization).
            </summary>
            <value>
            The interceptors.
            </value>
        </member>
        <member name="P:Weknow.EventSource.Backbone.IConsumerPlan.Logger">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.IConsumerPlan.Options">
            <summary>
            Gets the configuration.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.IConsumerPlan.SegmentationStrategies">
            <summary>
            Segmentation responsible of splitting an instance into segments.
            Segments is how the Consumer sending its raw data to
            the consumer. It's in a form of dictionary when
            keys represent the different segments
            and the value represent serialized form of the segment's data.
            </summary>
            <example>
            Examples for segments can be driven from regulation like
            GDPR (personal, non-personal data),
            Technical vs Business aspects, etc.
            </example>
        </member>
        <member name="T:Weknow.EventSource.Backbone.ConsumerMetadata">
            <summary>
            Represent metadata of message (command / event) metadata of
            a communication channel (Pub/Sub, Event Source, REST, GraphQL).
            It represent the operation's intent or represent event.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerMetadata.#ctor(Weknow.EventSource.Backbone.Metadata,System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="metadata">The metadata.</param>
            <param name="consumingCancellation">The consuming cancellation
            (stop consuming call-back on cancellation).</param>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ConsumerMetadata.Metadata">
            <summary>
            Gets the metadata.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ConsumerMetadata.ConsumingCancellation">
            <summary>
            Cancel the consuming process.
            </summary>
        </member>
        <member name="T:Weknow.EventSource.Backbone.IConsumerAsyncInterceptor">
            <summary>
            Consumer stage of an interception operation provider.
            It can be use for variety of responsibilities like 
            flowing auth context or traces, producing metrics, etc.
            </summary>
            <seealso cref="T:Weknow.EventSource.Backbone.IInterceptorName" />
        </member>
        <member name="M:Weknow.EventSource.Backbone.IConsumerAsyncInterceptor.InterceptAsync(Weknow.EventSource.Backbone.Metadata,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Interception operation.
            </summary>
            <param name="metadata">The metadata.</param>
            <param name="interceptorData">
            The interceptor data which sets on the 
            producer stage of the interception.</param>
        </member>
        <member name="T:Weknow.EventSource.Backbone.IConsumerInterceptor">
            <summary>
            Consumer stage of an interception operation provider.
            It can be use for variety of responsibilities like 
            flowing auth context or traces, producing metrics, etc.
            </summary>
            <seealso cref="T:Weknow.EventSource.Backbone.IInterceptorName" />
        </member>
        <member name="M:Weknow.EventSource.Backbone.IConsumerInterceptor.Intercept(Weknow.EventSource.Backbone.Metadata,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Interception operation.
            </summary>
            <param name="metadata">The metadata.</param>
            <param name="interceptorData">
            The interceptor data which sets on the 
            producer stage of the interception.</param>
        </member>
        <member name="T:Weknow.EventSource.Backbone.IConsumerChannelProvider">
            <summary>
            Channel provider responsible for passing the actual message 
            from producer to consumer. 
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.IConsumerChannelProvider.SubsribeAsync(Weknow.EventSource.Backbone.IConsumerPlan,System.Func{Weknow.EventSource.Backbone.Announcement,Weknow.EventSource.Backbone.AckCallbackAsync,System.Threading.Tasks.ValueTask},Weknow.EventSource.Backbone.IEventSourceConsumerOptions,System.Threading.CancellationToken)">
            <summary>
            Subscribe to the channel for specific metadata.
            </summary>
            <param name="plan">The consumer plan.</param>
            <param name="func">The function.</param>
            <param name="options">The options.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>When completed</returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.IConsumerAsyncSegmentationStrategy">
            <summary>
            Responsible of building instance from segmented data.
            Segmented data is how the producer sending its raw data to 
            the consumer. It's in a form of dictionary when 
            keys represent the different segments 
            and the value represent serialized form of the segment's data.
            </summary>
            <example>
            Examples for segments can be driven from regulation like
            GDPR (personal, non-personal data),
            Technical vs Business aspects, etc.
            </example>
        </member>
        <member name="M:Weknow.EventSource.Backbone.IConsumerAsyncSegmentationStrategy.TryUnclassifyAsync``1(Weknow.EventSource.Backbone.Bucket,System.String,System.String,Weknow.EventSource.Backbone.IEventSourceOptions)">
            <summary>
            Unclassify segmented data into an instance.
            Segments is how the producer sending its raw data to
            the consumer. It's in a form of dictionary when
            keys represent the different segments
            and the value represent serialized form of the segment's data.
            </summary>
            <param name="segments">The segments which was collect so far.
            It start as Empty and flow though all the registered segmentation strategies.</param>
            <param name="operation">The operation's key which represent the method call at the
            producer proxy.
            This way you can segment same type into different slot.</param>
            <param name="argumentName">Name of the argument.</param>
            <param name="options">The options.</param>
            <returns>
            Materialization of the segments.
            </returns>
            <example>
            Examples for segments can be driven from regulation like
            GDPR (personal, non-personal data),
            Technical vs Business aspects, etc.
            </example>
        </member>
        <member name="T:Weknow.EventSource.Backbone.IConsumerSegmentationStrategy">
            <summary>
            Responsible of building instance from segmented data.
            Segmented data is how the producer sending its raw data to 
            the consumer. It's in a form of dictionary when 
            keys represent the different segments 
            and the value represent serialized form of the segment's data.
            </summary>
            <example>
            Examples for segments can be driven from regulation like
            GDPR (personal, non-personal data),
            Technical vs Business aspects, etc.
            </example>
        </member>
        <member name="M:Weknow.EventSource.Backbone.IConsumerSegmentationStrategy.TryUnclassify``1(Weknow.EventSource.Backbone.Bucket,System.String,System.String,Weknow.EventSource.Backbone.IEventSourceOptions)">
            <summary>
            Unclassify segmented data into an instance.
            Segments is how the producer sending its raw data to
            the consumer. It's in a form of dictionary when
            keys represent the different segments
            and the value represent serialized form of the segment's data.
            </summary>
            <param name="segments">The segments which was collect so far.
            It start as Empty and flow though all the registered segmentation strategies.</param>
            <param name="operation">The operation's key which represent the method call at the
            producer proxy.
            This way you can segment same type into different slot.</param>
            <param name="argumentName">Name of the argument.</param>
            <param name="options">The options.</param>
            <returns>
            Materialization of the segments.
            </returns>
            <example>
            Examples for segments can be driven from regulation like
            GDPR (personal, non-personal data),
            Technical vs Business aspects, etc.
            </example>
        </member>
    </members>
</doc>
