<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Weknow.EventSource.Backbone.Consumers</name>
    </assembly>
    <members>
        <member name="T:Weknow.EventSource.Backbone.ConsumerBase">
            <summary>
            Base class for the consumer's code generator
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerBase.#ctor(Weknow.EventSource.Backbone.IConsumerPlanBuilder,System.Func{Weknow.EventSource.Backbone.Announcement,Weknow.EventSource.Backbone.IConsumerBridge,System.Threading.Tasks.Task}[])">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="plan">The plan.</param>
            <param name="handlers">Per method handler, handle methods calls.</param>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerBase.Subscribe">
            <summary>
            Subscribes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.ConsumerBase.EventSourceSubscriber">
            <summary>
            Represent single consuming subscription
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerBase.EventSourceSubscriber.#ctor(Weknow.EventSource.Backbone.IConsumerPlan,System.Func{Weknow.EventSource.Backbone.Announcement,Weknow.EventSource.Backbone.IConsumerBridge,System.Threading.Tasks.Task}[])">
            <summary>
            Initializes a new subscription.
            </summary>
            <param name="plan">The plan.</param>
            <param name="handlers">Per operation invocation handler, handle methods calls.</param>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerBase.EventSourceSubscriber.Weknow#EventSource#Backbone#IConsumerBridge#GetParameterAsync``1(Weknow.EventSource.Backbone.Announcement,System.String)">
            <summary>
            Get parameter value from the announcement.
            </summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="arg">The argument.</param>
            <param name="argumentName">Name of the argument.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ConsumerBase.EventSourceSubscriber.Completion">
            <summary>
            Represent the consuming completion..
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerBase.EventSourceSubscriber.ConsumingAsync(Weknow.EventSource.Backbone.Announcement,Weknow.EventSource.Backbone.IAck)">
            <summary>
            Handles consuming of single event.
            </summary>
            <param name="arg">The argument.</param>
            <param name="ack">
            The acknowledge callback which will prevent message from 
            being re-fetch from same consumer group.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerBase.EventSourceSubscriber.DisposeAsync">
            <summary>
            Release consumer.
            </summary>
            <returns>
            A task that represents the asynchronous dispose operation.
            </returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.ConsumerBase`1">
            <summary>
            Base class for the consumer's code generator
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerBase`1.#ctor(Weknow.EventSource.Backbone.IConsumerPlanBuilder,`0)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="plan">The plan.</param>
            <param name="handler">The events handler.</param>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerBase`1.Subscribe">
            <summary>
            Subscribes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.ConsumerBase`1.Subscription">
            <summary>
            Represent single consuming subscription
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerBase`1.Subscription.#ctor(Weknow.EventSource.Backbone.IConsumerPlan,`0)">
            <summary>
            Initializes a new subscription.
            </summary>
            <param name="plan">The plan.</param>
            <param name="handler">The factory.</param>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ConsumerBase`1.Subscription.Completion">
            <summary>
            Represent the consuming completion..
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerBase`1.Subscription.ConsumingAsync(Weknow.EventSource.Backbone.Announcement,Weknow.EventSource.Backbone.IAck)">
            <summary>
            Handles consuming of single event.
            </summary>
            <param name="arg">The argument.</param>
            <param name="ack">
            The acknowledge callback which will prevent message from 
            being re-fetch from same consumer group.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerBase`1.Subscription.UnclassifyAsync``1(Weknow.EventSource.Backbone.Announcement,System.String)">
            <summary>
            Unclassify the announcement.
            </summary>
            <typeparam name="TParam"></typeparam>
            <param name="arg">The argument.</param>
            <param name="argumentName">Name of the argument.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerBase`1.Subscription.DisposeAsync">
            <summary>
            Release consumer.
            </summary>
            <returns>
            A task that represents the asynchronous dispose operation.
            </returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.ConsumerBuilder">
            <summary>
            Event Source consumer builder.
            </summary>
        </member>
        <member name="F:Weknow.EventSource.Backbone.ConsumerBuilder.Empty">
            <summary>
            Event Source consumer builder.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerBuilder.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Weknow.EventSource.Backbone.ConsumerBuilder"/> class from being created.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerBuilder.#ctor(Weknow.EventSource.Backbone.ConsumerPlan)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="plan">The plan.</param>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerBuilder.Weknow#EventSource#Backbone#IConsumerBuilder#UseChannel(System.Func{Microsoft.Extensions.Logging.ILogger,Weknow.EventSource.Backbone.IConsumerChannelProvider})">
            <summary>
            Choose the communication channel provider.
            </summary>
            <param name="channel">The channel provider.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerBuilder.Weknow#EventSource#Backbone#IConsumerStoreStrategyBuilder#AddStorageStrategyFactory(System.Func{Microsoft.Extensions.Logging.ILogger,System.Threading.Tasks.ValueTask{Weknow.EventSource.Backbone.IConsumerStorageStrategy}},Weknow.EventSource.Backbone.EventBucketCategories)">
            <summary>
            Adds the storage strategy (Segment / Interceptions).
            Will use default storage (REDIS Hash) when empty.
            When adding more than one it will to all, act as a fall-back (first win, can use for caching).
            It important the consumer's storage will be in sync with this setting.
            </summary>
            <param name="storageStrategy">Storage strategy provider.</param>
            <param name="targetType">Type of the target.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerBuilder.Weknow#EventSource#Backbone#Building#IConsumerOptionsBuilder#WithOptions(System.Func{Weknow.EventSource.Backbone.ConsumerOptions,Weknow.EventSource.Backbone.ConsumerOptions})">
            <summary>
            Attach configuration.
            </summary>
            <param name="optionsStrategy"></param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerBuilder.Weknow#EventSource#Backbone#Building#IConsumerEnvironmentBuilder#Environment(System.String)">
            <summary>
            Include the environment as prefix of the stream key.
            for example: production:partition-name:shard-name
            </summary>
            <param name="environment">The environment.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerBuilder.Weknow#EventSource#Backbone#Building#IConsumerPartitionBuilder#Partition(System.String)">
            <summary>
            Partition key represent logical group of
            event source shards.
            For example assuming each ORDERING flow can have its
            own messaging sequence, yet can live concurrency with
            other ORDER's sequences.
            The partition will let consumer the option to be notify and
            consume multiple shards from single consumer.
            This way the consumer can handle all orders in
            central place without affecting sequence of specific order
            flow or limiting the throughput.
            </summary>
            <param name="partition">The partition key.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerBuilder.Shard(System.String)">
            <summary>
            Shard key represent physical sequence.
            On the consumer side shard is optional
            for listening on a physical source rather on the entire partition.
            Use same shard when order is matter.
            For example: assuming each ORDERING flow can have its
            own messaging sequence, in this case you can split each
            ORDER into different shard and gain performance bust..
            </summary>
            <param name="shard">The shard key.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerBuilder.Weknow#EventSource#Backbone#Building#IConsumerHooksBuilder#RegisterSegmentationStrategy(Weknow.EventSource.Backbone.IConsumerSegmentationStrategy)">
            <summary>
            Responsible of building instance from segmented data.
            Segmented data is how the producer sending its raw data to
            the consumer. It's in a form of dictionary when
            keys represent the different segments
            and the value represent serialized form of the segment's data.
            </summary>
            <param name="segmentationStrategy">The segmentation strategy.</param>
            <returns></returns>
            <example>
            Examples for segments can be driven from regulation like
            GDPR (personal, non-personal data),
            Technical vs Business aspects, etc.
            </example>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerBuilder.Weknow#EventSource#Backbone#Building#IConsumerHooksBuilder#RegisterSegmentationStrategy(Weknow.EventSource.Backbone.IConsumerAsyncSegmentationStrategy)">
            <summary>
            Responsible of building instance from segmented data.
            Segmented data is how the producer sending its raw data to
            the consumer. It's in a form of dictionary when
            keys represent the different segments
            and the value represent serialized form of the segment's data.
            </summary>
            <param name="segmentationStrategy">The segmentation strategy.</param>
            <returns></returns>
            <example>
            Examples for segments can be driven from regulation like
            GDPR (personal, non-personal data),
            Technical vs Business aspects, etc.
            </example>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerBuilder.Weknow#EventSource#Backbone#Building#IConsumerHooksBuilder#RegisterInterceptor(Weknow.EventSource.Backbone.IConsumerInterceptor)">
            <summary>
            Registers the interceptor.
            </summary>
            <param name="interceptor">The interceptor.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerBuilder.Weknow#EventSource#Backbone#Building#IConsumerHooksBuilder#RegisterInterceptor(Weknow.EventSource.Backbone.IConsumerAsyncInterceptor)">
            <summary>
            Registers the interceptor.
            </summary>
            <param name="interceptor">The interceptor.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerBuilder.Weknow#EventSource#Backbone#IConsumerLoggerBuilder#WithLogger(Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Attach logger.
            </summary>
            <param name="logger">The logger.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerBuilder.Weknow#EventSource#Backbone#IConsumerLoggerBuilder#WithResiliencePolicy(Polly.AsyncPolicy)">
            <summary>
            Set resilience policy
            </summary>
            <param name="policy">The policy.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerBuilder.Weknow#EventSource#Backbone#Building#IConsumerSubscribeBuilder#Subscribe(System.Func{Weknow.EventSource.Backbone.Announcement,Weknow.EventSource.Backbone.IConsumerBridge,System.Threading.Tasks.Task}[])">
            <summary>
            Subscribe consumer.
            </summary>
            <param name="handlers">Per operation invocation handler, handle methods calls.</param>
            <returns>
            The partition subscription (dispose to remove the subscription)
            </returns>
            <exception cref="T:System.ArgumentNullException">_plan</exception>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerBuilder.Weknow#EventSource#Backbone#Building#IConsumerSubscribeBuilder#Subscribe(System.Func{Weknow.EventSource.Backbone.Announcement,Weknow.EventSource.Backbone.IConsumerBridge,System.Threading.Tasks.Task}[],System.String,System.String)">
            <summary>
            Subscribe consumer.
            </summary>
            <param name="handlers">Per operation invocation handler, handle methods calls.</param>
            <param name="consumerGroup">Consumer Group allow a group of clients to cooperate
            consuming a different portion of the same stream of messages</param>
            <param name="consumerName">Optional Name of the consumer.
            Can use for observability.</param>
            <returns>
            The partition subscription (dispose to remove the subscription)
            </returns>
            <exception cref="T:System.ArgumentNullException">_plan</exception>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerBuilder.Weknow#EventSource#Backbone#Building#IConsumerSubscribeBuilder#Subscribe``1(``0,System.String,System.String)">
            <summary>
            Subscribe consumer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="eventHandler">Handling interface for the events.</param>
            <param name="consumerGroup">
            Consumer Group allow a group of clients to cooperate
            consuming a different portion of the same stream of messages
            </param>
            <param name="consumerName">
            Optional Name of the consumer.
            Can use for observability.
            </param>
            <returns>
            The partition subscription (dispose to remove the subscription)
            </returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerBuilder.Weknow#EventSource#Backbone#Building#IConsumerHooksBuilder#WithCancellation(System.Threading.CancellationToken)">
            <summary>
            Withes the cancellation token.
            </summary>
            <param name="cancellation">The cancellation.</param>
            <returns></returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.ConsumerPlan">
            <summary>
            Hold builder definitions.
            Define the consumer execution pipeline.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerPlan.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerPlan.#ctor(Weknow.EventSource.Backbone.ConsumerPlan,System.Func{Microsoft.Extensions.Logging.ILogger,Weknow.EventSource.Backbone.IConsumerChannelProvider},Weknow.EventSource.Backbone.IConsumerChannelProvider,System.String,System.String,System.String,Microsoft.Extensions.Logging.ILogger,Weknow.EventSource.Backbone.ConsumerOptions,System.Collections.Immutable.IImmutableList{Weknow.EventSource.Backbone.IConsumerAsyncSegmentationStrategy},System.Collections.Immutable.IImmutableList{Weknow.EventSource.Backbone.IConsumerAsyncInterceptor},System.Collections.Immutable.IImmutableList{Weknow.EventSource.Backbone.Building.IConsumerHooksBuilder},System.Nullable{System.Threading.CancellationToken},System.String,System.String,Polly.AsyncPolicy,System.Func{Microsoft.Extensions.Logging.ILogger,System.Threading.Tasks.Task{Weknow.EventSource.Backbone.IConsumerStorageStrategyWithFilter}})">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="copyFrom">The copy from.</param>
            <param name="channelFactory">The channel.</param>
            <param name="channel">The channel.</param>
            <param name="environment">The environment.</param>
            <param name="partition">The partition.</param>
            <param name="shard">The shard.</param>
            <param name="logger">The logger.</param>
            <param name="options">The options.</param>
            <param name="segmentationStrategies">The segmentation strategies.</param>
            <param name="interceptors">The interceptors.</param>
            <param name="routes">The routes.</param>
            <param name="cancellation">The cancellation token.</param>
            <param name="consumerGroup">Consumer Group allow a group of clients to cooperate
            consuming a different portion of the same stream of messages</param>
            <param name="consumerName">Optional Name of the consumer.
            Can use for observability.</param>
            <param name="resiliencePolicy">The resilience policy.</param>
            <param name="storageStrategyFactories">The storage strategy.</param>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ConsumerPlan.ChannelFactory">
            <summary>
            Gets the communication channel provider.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ConsumerPlan.Weknow#EventSource#Backbone#IConsumerPlan#Channel">
            <summary>
            Gets the communication channel provider.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ConsumerPlan.StorageStrategyFactories">
            <summary>
            Gets the storage strategy.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ConsumerPlan.StorageStrategiesAsync">
            <summary>
            Gets the storage strategies.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ConsumerPlan.Logger">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ConsumerPlan.Environment">
            <summary>
            Environment (part of the stream key)
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ConsumerPlan.Partition">
            <summary>
            Partition key represent logical group of 
            event source shards.
            For example assuming each ORDERING flow can have its 
            own messaging sequence, yet can live concurrency with 
            other ORDER's sequences.
            The partition will let consumer the option to be notify and
            consume multiple shards from single consumer.
            This way the consumer can handle all orders in
            central place without affecting sequence of specific order 
            flow or limiting the throughput.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ConsumerPlan.Shard">
            <summary>
            Shard key represent physical sequence.
            Use same shard when order is matter.
            For example: assuming each ORDERING flow can have its 
            own messaging sequence, in this case you can split each 
            ORDER into different shard and gain performance bust..
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ConsumerPlan.Options">
            <summary>
            Gets the configuration.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ConsumerPlan.SegmentationStrategies">
            <summary>
            Segmentation responsible of splitting an instance into segments.
            Segments is how the Consumer sending its raw data to
            the consumer. It's in a form of dictionary when
            keys represent the different segments
            and the value represent serialized form of the segment's data.
            </summary>
            <example>
            Examples for segments can be driven from regulation like
            GDPR (personal, non-personal data),
            Technical vs Business aspects, etc.
            </example>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ConsumerPlan.Interceptors">
            <summary>
            Consumer interceptors (Timing: after serialization).
            </summary>
            <value>
            The interceptors.
            </value>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ConsumerPlan.Cancellation">
            <summary>
            Gets the cancellation token.
            </summary>
        </member>
        <member name="F:Weknow.EventSource.Backbone.ConsumerPlan.Routes">
            <summary>
            Routes are sub-pipelines are results of merge operation
            which can split same payload into multiple partitions or shards.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ConsumerPlan.ConsumerGroup">
            <summary>
            Gets the consumer group.
            Consumer Group allow a group of clients to cooperate
            consuming a different portion of the same stream of messages
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ConsumerPlan.ConsumerName">
            <summary>
            Optional Name of the consumer.
            Can use for observability.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ConsumerPlan.ResiliencePolicy">
            <summary>
            Gets or sets the invocation resilience policy.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerPlan.WithChannelFactory(System.Func{Microsoft.Extensions.Logging.ILogger,Weknow.EventSource.Backbone.IConsumerChannelProvider})">
            <summary>
            Attach the channel.
            </summary>
            <param name="channel">The channel.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerPlan.WithStorageStrategy(System.Func{Microsoft.Extensions.Logging.ILogger,System.Threading.Tasks.Task{Weknow.EventSource.Backbone.IConsumerStorageStrategyWithFilter}})">
            <summary>
            Attach the Storage Strategy.
            </summary>
            <param name="storageStrategy">The storage strategy.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerPlan.WithLogger(Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Attach the LOGGER.
            </summary>
            <param name="logger">The logger.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerPlan.WithCancellation(System.Threading.CancellationToken)">
            <summary>
            Attach the cancellation.
            </summary>
            <param name="cancellation">The cancellation.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerPlan.WithOptions(Weknow.EventSource.Backbone.ConsumerOptions)">
            <summary>
            Attach the options.
            </summary>
            <param name="options">The options.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerPlan.WithEnvironment(System.String)">
            <summary>
            Attach the environment.
            </summary>
            <param name="environment">The environment.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerPlan.WithPartition(System.String)">
            <summary>
            Attach the partition.
            </summary>
            <param name="partition">The partition.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerPlan.Weknow#EventSource#Backbone#IConsumerPlanBase#WithShard(System.String)">
            <summary>
            Attach the shard.
            </summary>
            <param name="shard">The shard.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerPlan.WithShard(System.String)">
            <summary>
            Attach the shard.
            </summary>
            <param name="shard">The shard.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerPlan.WithResiliencePolicy(Polly.AsyncPolicy)">
            <summary>
            Set resilience policy
            </summary>
            <param name="policy">The policy.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerPlan.AddRoute(Weknow.EventSource.Backbone.Building.IConsumerHooksBuilder)">
            <summary>
            Adds the route.
            </summary>
            <param name="route">The route.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerPlan.AddSegmentation(Weknow.EventSource.Backbone.IConsumerAsyncSegmentationStrategy)">
            <summary>
            Adds the segmentation.
            </summary>
            <param name="segmentation">The segmentation.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerPlan.AddInterceptor(Weknow.EventSource.Backbone.IConsumerAsyncInterceptor)">
            <summary>
            Adds the interceptor.
            </summary>
            <param name="interceptor">The interceptor.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerPlan.WithConsumerGroup(System.String,System.String)">
            <summary>
            Set Consumer Group which allow a group of clients to cooperate
            consuming a different portion of the same stream of messages
            </summary>
            <param name="consumerGroup">
            Consumer Group allow a group of clients to cooperate
            consuming a different portion of the same stream of messages
            </param>
            <param name="consumerName">
            Optional Name of the consumer.
            Can use for observability.
            </param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerPlan.Weknow#EventSource#Backbone#IConsumerPlanBuilder#Build">
            <summary>
            Builds this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.FilteredStorageStrategy">
            <summary>
            Wrap Channel Storage with key filtering of the bucket.
            Useful for 'Chain of Responsibility' by saving different parts
            into different storage (For example GDPR's PII).
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.FilteredStorageStrategy.#ctor(Weknow.EventSource.Backbone.IConsumerStorageStrategy,Weknow.EventSource.Backbone.EventBucketCategories)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="storage">The actual storage provider.</param>
            <param name="targetType">Type of the target.</param>
        </member>
        <member name="M:Weknow.EventSource.Backbone.FilteredStorageStrategy.Weknow#EventSource#Backbone#IConsumerStorageStrategyWithFilter#IsOfTargetType(Weknow.EventSource.Backbone.EventBucketCategories)">
            <summary>
            Determines whether is of the right target type.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.FilteredStorageStrategy.Weknow#EventSource#Backbone#IConsumerStorageStrategy#LoadBucketAsync(Weknow.EventSource.Backbone.Metadata,Weknow.EventSource.Backbone.Bucket,Weknow.EventSource.Backbone.EventBucketCategories,System.Func{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Load the bucket information.
            </summary>
            <param name="meta">The meta fetch provider.</param>
            <param name="prevBucket">The current bucket (previous item in the chain).</param>
            <param name="type">The type of the storage.</param>
            <param name="getProperty">The get property.</param>
            <param name="cancellation">The cancellation.</param>
            <returns>
            Either Segments or Interceptions.
            </returns>
        </member>
    </members>
</doc>
