<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Weknow.EventSource.Backbone.Consumers</name>
    </assembly>
    <members>
        <member name="T:Weknow.EventSource.Backbone.ConsumerBase`1">
            <summary>
            Base class for the consumer's code generator
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerBase`1.#ctor(Weknow.EventSource.Backbone.ConsumerPlan,System.Func{Weknow.EventSource.Backbone.ConsumerMetadata,`0})">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="plan">The plan.</param>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerBase`1.Subscribe">
            <summary>
            Subscribes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.ConsumerBase`1.Subscription">
            <summary>
            Represent single consuming subscription
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerBase`1.Subscription.#ctor(Weknow.EventSource.Backbone.IConsumerPlan,System.Func{Weknow.EventSource.Backbone.ConsumerMetadata,`0})">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="plan">The plan.</param>
            <param name="factory">The factory.</param>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ConsumerBase`1.Subscription.Completion">
            <summary>
            Represent the consuming completion..
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerBase`1.Subscription.ConsumingAsync(Weknow.EventSource.Backbone.Announcement,Weknow.EventSource.Backbone.IAck)">
            <summary>
            Handles consuming of single event.
            </summary>
            <param name="arg">The argument.</param>
            <param name="ack">
            The acknowledge callback which will prevent message from 
            being re-fetch from same consumer group.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerBase`1.Subscription.UnclassifyAsync``1(Weknow.EventSource.Backbone.Announcement,System.String)">
            <summary>
            Unclassify the announcement.
            </summary>
            <typeparam name="TParam"></typeparam>
            <param name="arg">The argument.</param>
            <param name="argumentName">Name of the argument.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerBase`1.Subscription.DisposeAsync">
            <summary>
            Release consumer.
            </summary>
            <returns>
            A task that represents the asynchronous dispose operation.
            </returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.ConsumerBuilder">
            <summary>
            Event Source consumer builder.
            </summary>
        </member>
        <member name="F:Weknow.EventSource.Backbone.ConsumerBuilder.Empty">
            <summary>
            Event Source consumer builder.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerBuilder.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Weknow.EventSource.Backbone.ConsumerBuilder"/> class from being created.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerBuilder.#ctor(Weknow.EventSource.Backbone.ConsumerPlan)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="plan">The plan.</param>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerBuilder.Weknow#EventSource#Backbone#IConsumerBuilder#UseChannel(Weknow.EventSource.Backbone.IConsumerChannelProvider)">
            <summary>
            Choose the communication channel provider.
            </summary>
            <param name="channel">The channel provider.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerBuilder.Weknow#EventSource#Backbone#Building#IConsumerOptionsBuilder#WithOptions(Weknow.EventSource.Backbone.IEventSourceConsumerOptions)">
            <summary>
            Attach configuration.
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerBuilder.Weknow#EventSource#Backbone#Building#IConsumerPartitionBuilder#Partition(System.String)">
            <summary>
            Partition key represent logical group of
            event source shards.
            For example assuming each ORDERING flow can have its
            own messaging sequence, yet can live concurrency with
            other ORDER's sequences.
            The partition will let consumer the option to be notify and
            consume multiple shards from single consumer.
            This way the consumer can handle all orders in
            central place without affecting sequence of specific order
            flow or limiting the throughput.
            </summary>
            <param name="partition">The partition key.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerBuilder.Shard(System.String)">
            <summary>
            Shard key represent physical sequence.
            On the consumer side shard is optional
            for listening on a physical source rather on the entire partition.
            Use same shard when order is matter.
            For example: assuming each ORDERING flow can have its
            own messaging sequence, in this case you can split each
            ORDER into different shard and gain performance bust..
            </summary>
            <param name="shard">The shard key.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerBuilder.Weknow#EventSource#Backbone#Building#IConsumerHooksBuilder#RegisterSegmentationStrategy(Weknow.EventSource.Backbone.IConsumerSegmentationStrategy)">
            <summary>
            Responsible of building instance from segmented data.
            Segmented data is how the producer sending its raw data to
            the consumer. It's in a form of dictionary when
            keys represent the different segments
            and the value represent serialized form of the segment's data.
            </summary>
            <param name="segmentationStrategy">The segmentation strategy.</param>
            <returns></returns>
            <example>
            Examples for segments can be driven from regulation like
            GDPR (personal, non-personal data),
            Technical vs Business aspects, etc.
            </example>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerBuilder.Weknow#EventSource#Backbone#Building#IConsumerHooksBuilder#RegisterSegmentationStrategy(Weknow.EventSource.Backbone.IConsumerAsyncSegmentationStrategy)">
            <summary>
            Responsible of building instance from segmented data.
            Segmented data is how the producer sending its raw data to
            the consumer. It's in a form of dictionary when
            keys represent the different segments
            and the value represent serialized form of the segment's data.
            </summary>
            <param name="segmentationStrategy">The segmentation strategy.</param>
            <returns></returns>
            <example>
            Examples for segments can be driven from regulation like
            GDPR (personal, non-personal data),
            Technical vs Business aspects, etc.
            </example>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerBuilder.Weknow#EventSource#Backbone#Building#IConsumerHooksBuilder#RegisterInterceptor(Weknow.EventSource.Backbone.IConsumerInterceptor)">
            <summary>
            Registers the interceptor.
            </summary>
            <param name="interceptor">The interceptor.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerBuilder.Weknow#EventSource#Backbone#Building#IConsumerHooksBuilder#RegisterInterceptor(Weknow.EventSource.Backbone.IConsumerAsyncInterceptor)">
            <summary>
            Registers the interceptor.
            </summary>
            <param name="interceptor">The interceptor.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerBuilder.Weknow#EventSource#Backbone#Building#IConsumerLoggerBuilder#WithLogger(Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Attach logger.
            </summary>
            <param name="logger">The logger.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerBuilder.Weknow#EventSource#Backbone#Building#IConsumerSubscribeBuilder#Subscribe``1(System.Func{Weknow.EventSource.Backbone.ConsumerMetadata,``0},System.String,System.String)">
            <summary>
            Subscribe consumer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="factory">The factory.</param>
            <param name="consumerGroup">
            Consumer Group allow a group of clients to cooperate
            consuming a different portion of the same stream of messages
            </param>
            <param name="consumerName">
            Optional Name of the consumer.
            Can use for observability.
            </param>
            <returns>
            The partition subscription (dispose to remove the subscription)
            </returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerBuilder.Weknow#EventSource#Backbone#Building#IConsumerHooksBuilder#WithCancellation(System.Threading.CancellationToken)">
            <summary>
            Withes the cancellation token.
            </summary>
            <param name="cancellation">The cancellation.</param>
            <returns></returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.ConsumerPlan">
            <summary>
            Hold builder definitions.
            Define the consumer execution pipeline.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerPlan.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerPlan.#ctor(Weknow.EventSource.Backbone.ConsumerPlan,Weknow.EventSource.Backbone.IConsumerChannelProvider,System.String,System.String,Microsoft.Extensions.Logging.ILogger,Weknow.EventSource.Backbone.IEventSourceConsumerOptions,System.Collections.Immutable.IImmutableList{Weknow.EventSource.Backbone.IConsumerAsyncSegmentationStrategy},System.Collections.Immutable.IImmutableList{Weknow.EventSource.Backbone.IConsumerAsyncInterceptor},System.Collections.Immutable.IImmutableList{Weknow.EventSource.Backbone.Building.IConsumerHooksBuilder},System.Nullable{System.Threading.CancellationToken},System.String,System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="copyFrom">The copy from.</param>
            <param name="channel">The channel.</param>
            <param name="partition">The partition.</param>
            <param name="shard">The shard.</param>
            <param name="logger">The logger.</param>
            <param name="options">The options.</param>
            <param name="segmentationStrategies">The segmentation strategies.</param>
            <param name="interceptors">The interceptors.</param>
            <param name="routes">The routes.</param>
            <param name="cancellation">The cancellation token.</param>
            <param name="consumerGroup">Consumer Group allow a group of clients to cooperate
            consuming a different portion of the same stream of messages</param>
            <param name="consumerName">
            Optional Name of the consumer.
            Can use for observability.
            </param>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ConsumerPlan.Channel">
            <summary>
            Gets the communication channel provider.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ConsumerPlan.Logger">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ConsumerPlan.Partition">
            <summary>
            Partition key represent logical group of 
            event source shards.
            For example assuming each ORDERING flow can have its 
            own messaging sequence, yet can live concurrency with 
            other ORDER's sequences.
            The partition will let consumer the option to be notify and
            consume multiple shards from single consumer.
            This way the consumer can handle all orders in
            central place without affecting sequence of specific order 
            flow or limiting the throughput.
            </summary>
            <value>
            The partition.
            </value>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ConsumerPlan.Shard">
            <summary>
            Shard key represent physical sequence.
            Use same shard when order is matter.
            For example: assuming each ORDERING flow can have its 
            own messaging sequence, in this case you can split each 
            ORDER into different shard and gain performance bust..
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ConsumerPlan.Options">
            <summary>
            Gets the configuration.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ConsumerPlan.SegmentationStrategies">
            <summary>
            Segmentation responsible of splitting an instance into segments.
            Segments is how the Consumer sending its raw data to
            the consumer. It's in a form of dictionary when
            keys represent the different segments
            and the value represent serialized form of the segment's data.
            </summary>
            <example>
            Examples for segments can be driven from regulation like
            GDPR (personal, non-personal data),
            Technical vs Business aspects, etc.
            </example>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ConsumerPlan.Interceptors">
            <summary>
            Consumer interceptors (Timing: after serialization).
            </summary>
            <value>
            The interceptors.
            </value>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ConsumerPlan.Cancellation">
            <summary>
            Gets the cancellation token.
            </summary>
        </member>
        <member name="F:Weknow.EventSource.Backbone.ConsumerPlan.Routes">
            <summary>
            Routes are sub-pipelines are results of merge operation
            which can split same payload into multiple partitions or shards.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ConsumerPlan.ConsumerGroup">
            <summary>
            Gets the consumer group.
            Consumer Group allow a group of clients to cooperate
            consuming a different portion of the same stream of messages
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ConsumerPlan.ConsumerName">
            <summary>
            Optional Name of the consumer.
            Can use for observability.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerPlan.WithChannel(Weknow.EventSource.Backbone.IConsumerChannelProvider)">
            <summary>
            Attach the channel.
            </summary>
            <param name="channel">The channel.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerPlan.WithLogger(Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Attach the LOGGER.
            </summary>
            <param name="logger">The logger.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerPlan.WithCancellation(System.Threading.CancellationToken)">
            <summary>
            Attach the cancellation.
            </summary>
            <param name="cancellation">The cancellation.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerPlan.WithOptions(Weknow.EventSource.Backbone.IEventSourceConsumerOptions)">
            <summary>
            Attach the options.
            </summary>
            <param name="options">The options.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerPlan.WithPartition(System.String)">
            <summary>
            Attach the partition.
            </summary>
            <param name="partition">The partition.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerPlan.WithShard(System.String)">
            <summary>
            Attach the shard.
            </summary>
            <param name="shard">The shard.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerPlan.AddRoute(Weknow.EventSource.Backbone.Building.IConsumerHooksBuilder)">
            <summary>
            Adds the route.
            </summary>
            <param name="route">The route.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerPlan.AddSegmentation(Weknow.EventSource.Backbone.IConsumerAsyncSegmentationStrategy)">
            <summary>
            Adds the segmentation.
            </summary>
            <param name="segmentation">The segmentation.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerPlan.AddInterceptor(Weknow.EventSource.Backbone.IConsumerAsyncInterceptor)">
            <summary>
            Adds the interceptor.
            </summary>
            <param name="interceptor">The interceptor.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerPlan.WithConsumerGroup(System.String,System.String)">
            <summary>
            Set Consumer Group which allow a group of clients to cooperate
            consuming a different portion of the same stream of messages
            </summary>
            <param name="consumerGroup">
            Consumer Group allow a group of clients to cooperate
            consuming a different portion of the same stream of messages
            </param>
            <param name="consumerName">
            Optional Name of the consumer.
            Can use for observability.
            </param>
            <returns></returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.ConsumerPlan.NopChannel">
            <summary>
            Not operational channel
            </summary>
            <seealso cref="T:Weknow.EventSource.Backbone.IConsumerChannelProvider" />
        </member>
        <member name="M:Weknow.EventSource.Backbone.ConsumerPlan.NopChannel.SubsribeAsync(Weknow.EventSource.Backbone.IConsumerPlan,System.Func{Weknow.EventSource.Backbone.Announcement,Weknow.EventSource.Backbone.IAck,System.Threading.Tasks.ValueTask},Weknow.EventSource.Backbone.IEventSourceConsumerOptions,System.Threading.CancellationToken)">
            <summary>
            Subscribe to the channel for specific metadata.
            </summary>
            <param name="plan">The consumer plan.</param>
            <param name="func">The function.</param>
            <param name="options">The options.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            When completed
            </returns>
            <exception cref="T:System.NotSupportedException">Channel must be define</exception>
        </member>
        <member name="M:Weknow.EventSource.Backbone.EventSourceConsumerOptions.#ctor(Weknow.EventSource.Backbone.AckBehavior,System.Int32,Weknow.EventSource.Backbone.IDataSerializer,System.UInt32,System.Boolean)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="ackBehavior">The acknowledge behavior.</param>
            <param name="batchSize">Gets the max batch size of reading messages per shard.
            The framework won't proceed to the next batch until all messages
            in the batch complete (or timeout when it set to acknowledge on timeout).</param>
            <param name="serializer">The serializer.</param>
            <param name="maxMessages">
            Maximum messages to consume before detaching the subscription.
            any number > 0 will activate this mechanism.
            </param>
            <param name="keepAlive">Gets a value indicating whether to prevent the consumer
            from being collect by the GC.
            True by default, when you hold the subscription disposable
            you can set it to false. as long as you keeping the disposable in
            object that isn't candidate for being collected the consumer will stay alive.</param>
        </member>
        <member name="P:Weknow.EventSource.Backbone.EventSourceConsumerOptions.BatchSize">
            <summary>
            Gets the max batch size of reading messages per shard.
            The framework won't proceed to the next batch until all messages
            in the batch complete (or timeout when it set to acknowledge on timeout).
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.EventSourceConsumerOptions.KeepAlive">
            <summary>
            Gets a value indicating whether to prevent the consumer
            from being collect by the GC.
            True by default, when you hold the subscription disposable
            you can set it to false. as long as you keeping the disposable in
            object that isn't candidate for being collected the consumer will stay alive.
            </summary>
            <value>
              <c>true</c> if [keep alive]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Weknow.EventSource.Backbone.EventSourceConsumerOptions.AckBehavior">
            <summary>
            Gets the acknowledge behavior.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.EventSourceConsumerOptions.MaxMessages">
            <summary>
            Gets the maximum messages to consume before detaching the subscription.
            any number > 0 will activate this mechanism.
            </summary>
        </member>
    </members>
</doc>
