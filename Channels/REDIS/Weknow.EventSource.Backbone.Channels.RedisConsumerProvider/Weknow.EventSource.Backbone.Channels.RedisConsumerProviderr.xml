<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Weknow.EventSource.Backbone.Channels.RedisConsumerProvider</name>
    </assembly>
    <members>
        <member name="M:Weknow.EventSource.Backbone.Channels.RedisProvider.RedisConsumerChannel.#ctor(System.Threading.Tasks.Task{StackExchange.Redis.IConnectionMultiplexer},Microsoft.Extensions.Logging.ILogger,Weknow.EventSource.Backbone.Channels.RedisProvider.RedisConsumerChannelSetting)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="redis">The redis provider promise.</param>
            <param name="logger">The logger.</param>
            <param name="setting">The setting.</param>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Channels.RedisProvider.RedisConsumerChannel.#ctor(StackExchange.Redis.IConnectionMultiplexer,Microsoft.Extensions.Logging.ILogger,Weknow.EventSource.Backbone.Channels.RedisProvider.RedisConsumerChannelSetting)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="redis">The redis database.</param>
            <param name="logger">The logger.</param>
            <param name="setting">The setting.</param>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Channels.RedisProvider.RedisConsumerChannel.#ctor(Microsoft.Extensions.Logging.ILogger,System.Action{StackExchange.Redis.ConfigurationOptions},Weknow.EventSource.Backbone.Channels.RedisProvider.RedisConsumerChannelSetting,System.String,System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="logger">The logger.</param>
            <param name="configuration">The configuration.</param>
            <param name="setting">The setting.</param>
            <param name="endpointEnvKey">The endpoint env key.</param>
            <param name="passwordEnvKey">The password env key.</param>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Channels.RedisProvider.RedisConsumerChannel.SubsribeAsync(Weknow.EventSource.Backbone.IConsumerPlan,System.Func{Weknow.EventSource.Backbone.Announcement,Weknow.EventSource.Backbone.IAck,System.Threading.Tasks.ValueTask},Weknow.EventSource.Backbone.IEventSourceConsumerOptions,System.Threading.CancellationToken)">
            <summary>
            Subscribe to the channel for specific metadata.
            </summary>
            <param name="plan">The consumer plan.</param>
            <param name="func">The function.</param>
            <param name="options">The options.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            When completed
            </returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Channels.RedisProvider.RedisConsumerChannel.SubsribePartitionAsync(StackExchange.Redis.IDatabaseAsync,Weknow.EventSource.Backbone.IConsumerPlan,System.Func{Weknow.EventSource.Backbone.Announcement,Weknow.EventSource.Backbone.IAck,System.Threading.Tasks.ValueTask},Weknow.EventSource.Backbone.IEventSourceConsumerOptions,System.Threading.CancellationToken)">
            <summary>
            Subscribe to all shards under a partition.
            </summary>
            <param name="db">The database.</param>
            <param name="plan">The consumer plan.</param>
            <param name="func">The function.</param>
            <param name="options">The options.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            When completed
            </returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Channels.RedisProvider.RedisConsumerChannel.SubsribeShardAsync(StackExchange.Redis.IDatabaseAsync,Weknow.EventSource.Backbone.IConsumerPlan,System.Func{Weknow.EventSource.Backbone.Announcement,Weknow.EventSource.Backbone.IAck,System.Threading.Tasks.ValueTask},Weknow.EventSource.Backbone.IEventSourceConsumerOptions,System.Threading.CancellationToken)">
            <summary>
            Subscribe to specific shard.
            </summary>
            <param name="db">The database.</param>
            <param name="plan">The consumer plan.</param>
            <param name="func">The function.</param>
            <param name="options">The options.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Channels.RedisProvider.RedisConsumerChannel.GetKeysUnsafeAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the keys unsafe asynchronous.
            </summary>
            <param name="pattern">The pattern.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.Channels.RedisProvider.DelayWhenEmptyBehavior">
            <summary>
            Behavior of delay when empty
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.Channels.RedisProvider.DelayWhenEmptyBehavior.MaxDelay">
            <summary>
            Gets or sets the maximum delay.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.Channels.RedisProvider.DelayWhenEmptyBehavior.CalcNextDelay">
            <summary>
            Gets or sets the next delay.
            </summary>
        </member>
        <member name="T:Weknow.EventSource.Backbone.Channels.RedisProvider.RedisConsumerChannelSetting">
            <summary>
            Represent specific setting of the consumer channel
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.Channels.RedisProvider.RedisConsumerChannelSetting.ClaimingTrigger">
            <summary>
            Define when to claim stale (long waiting) messages from other consumers
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.Channels.RedisProvider.RedisConsumerChannelSetting.Policy">
            <summary>
            Gets or sets the resilience policy.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.Channels.RedisProvider.RedisConsumerChannelSetting.DelayWhenEmptyBehavior">
            <summary>
            Behavior of delay when empty
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Channels.RedisProvider.RedisConsumerChannelSetting.op_Implicit(Polly.AsyncPolicy)~Weknow.EventSource.Backbone.Channels.RedisProvider.RedisConsumerChannelSetting">
            <summary>
            Performs an implicit conversion.
            </summary>
            <param name="policy">The policy.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.Channels.RedisProvider.ResiliencePolicies">
            <summary>
            Define when to claim stale (long waiting) messages from other consumers
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Channels.RedisProvider.ResiliencePolicies.#ctor(Polly.AsyncPolicy)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="policy">The policy.</param>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Channels.RedisProvider.ResiliencePolicies.#ctor(System.Action{System.Exception,Polly.CircuitBreaker.CircuitState,System.TimeSpan,Polly.Context},System.Action{Polly.Context},System.Action,System.Func{System.Exception,System.TimeSpan,System.Int32,Polly.Context,System.Threading.Tasks.Task})">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="onBreak">The on break.</param>
            <param name="onReset">The on reset.</param>
            <param name="onHalfOpen">The on half open.</param>
            <param name="onRetry">The on retry.</param>
        </member>
        <member name="P:Weknow.EventSource.Backbone.Channels.RedisProvider.ResiliencePolicies.Policy">
            <summary>
            Gets or sets the batch reading policy.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Channels.RedisProvider.ResiliencePolicies.op_Implicit(Polly.AsyncPolicy)~Weknow.EventSource.Backbone.Channels.RedisProvider.ResiliencePolicies">
            <summary>
            Performs an implicit conversion.
            </summary>
            <param name="policy">The policy.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Channels.RedisProvider.ResiliencePolicies.op_Implicit(Weknow.EventSource.Backbone.Channels.RedisProvider.ResiliencePolicies)~Polly.AsyncPolicy">
            <summary>
            Performs an implicit conversion.
            </summary>
            <param name="instance">The instance.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.Channels.RedisProvider.StaleMessagesClaimingTrigger">
            <summary>
            Define when to claim stale (long waiting) messages from other consumers
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.Channels.RedisProvider.StaleMessagesClaimingTrigger.EmptyBatchCount">
            <summary>
            Empty batch count define number of empty fetching cycle in a row 
            which will trigger operation of trying to get stale messages from other consumers.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.Channels.RedisProvider.StaleMessagesClaimingTrigger.MinIdleTime">
            <summary>
            The minimum message idle time to allow the reassignment of the message(s).
            </summary>
        </member>
        <member name="T:Weknow.EventSource.Backbone.Channels.RedisHashStorageStrategy">
            <summary>
            Responsible to save information to REDIS hash storage.
            The information can be either Segmentation or Interception.
            When adding it via the builder it can be arrange in a chain in order of having
            'Chain of Responsibility' for saving different parts into different storage (For example GDPR's PII).
            Alternative, chain can serve as a cache layer.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Channels.RedisHashStorageStrategy.#ctor(System.Threading.Tasks.Task{StackExchange.Redis.IDatabaseAsync})">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="dbTask">The database task.</param>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Channels.RedisHashStorageStrategy.Weknow#EventSource#Backbone#IConsumerStorageStrategy#LoadBucketAsync(Weknow.EventSource.Backbone.Metadata,Weknow.EventSource.Backbone.Bucket,Weknow.EventSource.Backbone.EventBucketCategories,System.Func{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Load the bucket information.
            </summary>
            <param name="meta">The meta fetch provider.</param>
            <param name="prevBucket">The current bucket (previous item in the chain).</param>
            <param name="type">The type of the storage.</param>
            <param name="getProperty">The get property.</param>
            <param name="cancellation">The cancellation.</param>
            <returns>
            Either Segments or Interceptions.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Weknow.EventSource.Backbone.RedisConsumerProviderExtensions.UseRedisChannel(Weknow.EventSource.Backbone.IConsumerBuilder,System.Func{Weknow.EventSource.Backbone.Channels.RedisProvider.RedisConsumerChannelSetting,Weknow.EventSource.Backbone.Channels.RedisProvider.RedisConsumerChannelSetting},System.Action{StackExchange.Redis.ConfigurationOptions},System.String,System.String)">
            <summary>
            Uses REDIS consumer channel.
            </summary>
            <param name="builder">The builder.</param>
            <param name="setting">The setting.</param>
            <param name="redisConfiguration">The redis configuration.</param>
            <param name="endpointEnvKey">The endpoint env key.</param>
            <param name="passwordEnvKey">The password env key.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.RedisConsumerProviderExtensions.UseRedisChannel(Weknow.EventSource.Backbone.IConsumerBuilder,Weknow.EventSource.Backbone.Channels.RedisProvider.RedisConsumerChannelSetting,System.String,System.String)">
            <summary>
            Uses REDIS consumer channel.
            </summary>
            <param name="builder">The builder.</param>
            <param name="setting">The setting.</param>
            <param name="endpointEnvKey">The endpoint env key.</param>
            <param name="passwordEnvKey">The password env key.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.RedisConsumerProviderExtensions.UseRedisChannel(Weknow.EventSource.Backbone.IConsumerBuilder,System.Threading.Tasks.Task{StackExchange.Redis.IConnectionMultiplexer},Weknow.EventSource.Backbone.Channels.RedisProvider.RedisConsumerChannelSetting)">
            <summary>
            Uses REDIS consumer channel.
            </summary>
            <param name="builder">The builder.</param>
            <param name="redisClient">The redis client.</param>
            <param name="setting">The setting.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.RedisConsumerProviderExtensions.UseRedisChannel(Weknow.EventSource.Backbone.IConsumerBuilder,StackExchange.Redis.IConnectionMultiplexer,Weknow.EventSource.Backbone.Channels.RedisProvider.RedisConsumerChannelSetting)">
            <summary>
            Uses REDIS consumer channel.
            </summary>
            <param name="builder">The builder.</param>
            <param name="redisClient">The redis client.</param>
            <param name="setting">The setting.</param>
            <returns></returns>
        </member>
    </members>
</doc>
