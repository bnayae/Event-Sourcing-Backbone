<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Weknow.EventSource.Backbone.Channels.RedisProducerProvider</name>
    </assembly>
    <members>
        <member name="M:Weknow.EventSource.Backbone.Channels.RedisProvider.RedisProducerChannel.#ctor(System.Threading.Tasks.Task{StackExchange.Redis.IConnectionMultiplexer},Microsoft.Extensions.Logging.ILogger,Polly.AsyncPolicy)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="redis">The redis database promise.</param>
            <param name="logger">The logger.</param>
            <param name="resiliencePolicy">The resilience policy for retry.</param>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Channels.RedisProvider.RedisProducerChannel.#ctor(System.Threading.Tasks.Task{StackExchange.Redis.IDatabaseAsync},Microsoft.Extensions.Logging.ILogger,Polly.AsyncPolicy)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="redis">The redis database promise.</param>
            <param name="logger">The logger.</param>
            <param name="resiliencePolicy">The resilience policy for retry.</param>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Channels.RedisProvider.RedisProducerChannel.#ctor(StackExchange.Redis.IDatabaseAsync,Microsoft.Extensions.Logging.ILogger,Polly.AsyncPolicy)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="redis">The redis database.</param>
            <param name="logger">The logger.</param>
            <param name="resiliencePolicy">The resilience policy for retry.</param>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Channels.RedisProvider.RedisProducerChannel.#ctor(Microsoft.Extensions.Logging.ILogger,System.Action{StackExchange.Redis.ConfigurationOptions},Polly.AsyncPolicy,System.String,System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="logger">The logger.</param>
            <param name="configuration">The configuration.</param>
            <param name="resiliencePolicy">The resilience policy for retry.</param>
            <param name="endpointEnvKey">The endpoint env key.</param>
            <param name="passwordEnvKey">The password env key.</param>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Channels.RedisProvider.RedisProducerChannel.GetDB(System.Threading.Tasks.Task{StackExchange.Redis.IConnectionMultiplexer})">
            <summary>
            Gets the database.
            </summary>
            <param name="redis">The redis.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Channels.RedisProvider.RedisProducerChannel.SendAsync(Weknow.EventSource.Backbone.Announcement,System.Collections.Immutable.ImmutableArray{Weknow.EventSource.Backbone.IProducerStorageStrategyWithFilter})">
            <summary>
            Sends raw announcement.
            </summary>
            <param name="payload">The raw announcement data.</param>
            <param name="storageStrategy">The storage strategy.</param>
            <returns>
            Return the message id
            </returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.Channels.RedisHashStorageStrategy">
            <summary>
            Responsible to save information to REDIS hash storage.
            The information can be either Segmentation or Interception.
            When adding it via the builder it can be arrange in a chain in order of having
            'Chain of Responsibility' for saving different parts into different storage (For example GDPR's PII).
            Alternative, chain can serve as a cache layer.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Channels.RedisHashStorageStrategy.#ctor(System.Threading.Tasks.Task{StackExchange.Redis.IDatabaseAsync},Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="dbTask">The database task.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Channels.RedisHashStorageStrategy.Weknow#EventSource#Backbone#IProducerStorageStrategy#SaveBucketAsync(System.String,Weknow.EventSource.Backbone.Bucket,Weknow.EventSource.Backbone.EventBucketCategories,Weknow.EventSource.Backbone.Metadata,System.Threading.CancellationToken)">
            <summary>
            Saves the bucket information.
            </summary>
            <param name="id">The identifier.</param>
            <param name="bucket">Either Segments or Interceptions.</param>
            <param name="type">The type.</param>
            <param name="meta">The metadata.</param>
            <param name="cancellation">The cancellation.</param>
            <returns>
            Array of metadata entries which can be used by the consumer side storage strategy, in order to fetch the data.
            </returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.RedisProviderExtensions.AddEventProducerTelemetry(OpenTelemetry.Trace.TracerProviderBuilder)">
            <summary>
            Adds the event producer telemetry source (will result in tracing the producer).
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.RedisProviderExtensions.UseRedisChannel(Weknow.EventSource.Backbone.IProducerBuilder,System.Action{StackExchange.Redis.ConfigurationOptions},Polly.AsyncPolicy,System.String,System.String)">
            <summary>
            Uses REDIS producer channel.
            </summary>
            <param name="builder">The builder.</param>
            <param name="configuration">The configuration.</param>
            <param name="resiliencePolicy">The resilience policy.</param>
            <param name="endpointEnvKey">The endpoint env key.</param>
            <param name="passwordEnvKey">The password env key.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Weknow.EventSource.Backbone.RedisProviderExtensions.UseRedisChannel(Weknow.EventSource.Backbone.IProducerBuilder,StackExchange.Redis.IDatabaseAsync,Polly.AsyncPolicy)">
            <summary>
            Uses REDIS producer channel.
            </summary>
            <param name="builder">The builder.</param>
            <param name="redis">The redis database.</param>
            <param name="resiliencePolicy">The resilience policy.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Weknow.EventSource.Backbone.RedisProviderExtensions.UseRedisChannel(Weknow.EventSource.Backbone.IProducerBuilder,System.Threading.Tasks.Task{StackExchange.Redis.IDatabaseAsync},Polly.AsyncPolicy)">
            <summary>
            Uses REDIS producer channel.
            </summary>
            <param name="builder">The builder.</param>
            <param name="redis">The redis database.</param>
            <param name="resiliencePolicy">The resilience policy.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Weknow.EventSource.Backbone.RedisProviderExtensions.UseRedisChannelInjection(Weknow.EventSource.Backbone.IProducerBuilder,System.IServiceProvider,Polly.AsyncPolicy)">
            <summary>
            Uses REDIS producer channel.
            </summary>
            <param name="builder">The builder.</param>
            <param name="serviceProvider">The service provider.</param>
            <param name="resiliencePolicy">The resilience policy.</param>
            <returns></returns>
        </member>
    </members>
</doc>
