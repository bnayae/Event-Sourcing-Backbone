<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Weknow.EventSource.Backbone.Channels.RedisProducerProvider</name>
    </assembly>
    <members>
        <member name="T:Weknow.EventSource.Backbone.IProducerStorageStrategyWithFilter">
            <summary>
            Responsible to save information to storage.
            The information can be either Segmentation or Interception.
            When adding it via the builder it can be arrange in a chain in order of having
            'Chain of Responsibility' for saving different parts into different storage (For example GDPR's PII).
            Alternative, chain can serve as a cache layer.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.IProducerStorageStrategyWithFilter.IsOfTargetType(Weknow.EventSource.Backbone.EventBucketCategories)">
            <summary>
            Determines whether is of the right target type.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Channels.RedisProvider.RedisProducerChannel.#ctor(Microsoft.Extensions.Logging.ILogger,System.Action{StackExchange.Redis.ConfigurationOptions},Polly.AsyncPolicy,System.String,System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="logger">The logger.</param>
            <param name="configuration">The configuration.</param>
            <param name="resiliencePolicy">The resilience policy for retry.</param>
            <param name="endpointEnvKey">The endpoint env key.</param>
            <param name="passwordEnvKey">The password env key.</param>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Channels.RedisProvider.RedisProducerChannel.#ctor(Weknow.EventSource.Backbone.Channels.RedisProvider.RedisProducerChannel,System.Collections.Immutable.ImmutableArray{Weknow.EventSource.Backbone.IProducerStorageStrategyWithFilter})">
            <summary>
            Copy ctor.
            </summary>
            <param name="self">The self.</param>
            <param name="storageStrategy">The storage strategy.</param>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Channels.RedisProvider.RedisProducerChannel.SendAsync(Weknow.EventSource.Backbone.Announcement)">
            <summary>
            Sends raw announcement.
            </summary>
            <param name="payload">The raw announcement data.</param>
            <returns>
            Return the message id
            </returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.Channels.FilteredStorageStrategy">
            <summary>
            Wrap Channel Storage with key filtering of the bucket.
            Useful for 'Chain of Responsibility' by saving different parts
            into different storage (For example GDPR's PII).
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Channels.FilteredStorageStrategy.#ctor(Weknow.EventSource.Backbone.IProducerStorageStrategy,System.Predicate{System.String},Weknow.EventSource.Backbone.EventBucketCategories)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="storage">The actual storage provider.</param>
            <param name="filter">The filter according to keys.</param>
            <param name="targetType">Type of the target.</param>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Channels.FilteredStorageStrategy.Weknow#EventSource#Backbone#IProducerStorageStrategyWithFilter#IsOfTargetType(Weknow.EventSource.Backbone.EventBucketCategories)">
            <summary>
            Determines whether is of the right target type.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Channels.FilteredStorageStrategy.Weknow#EventSource#Backbone#IProducerStorageStrategy#SaveBucketAsync(System.String,Weknow.EventSource.Backbone.Bucket,Weknow.EventSource.Backbone.EventBucketCategories,Weknow.EventSource.Backbone.Metadata,System.Threading.CancellationToken)">
            <summary>
            Saves the bucket information.
            </summary>
            <param name="id">The identifier.</param>
            <param name="bucket">Either Segments or Interceptions.</param>
            <param name="type">The type.</param>
            <param name="meta">The metadata.</param>
            <param name="cancellation">The cancellation.</param>
            <returns>
            Array of metadata entries which can be used by the consumer side storage strategy, in order to fetch the data.
            </returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.Channels.RedisHashStorageStrategy">
            <summary>
            Responsible to save information to REDIS hash storage.
            The information can be either Segmentation or Interception.
            When adding it via the builder it can be arrange in a chain in order of having
            'Chain of Responsibility' for saving different parts into different storage (For example GDPR's PII).
            Alternative, chain can serve as a cache layer.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Channels.RedisHashStorageStrategy.#ctor(System.Threading.Tasks.Task{StackExchange.Redis.IDatabaseAsync})">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="dbTask">The database task.</param>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Channels.RedisHashStorageStrategy.Weknow#EventSource#Backbone#IProducerStorageStrategy#SaveBucketAsync(System.String,Weknow.EventSource.Backbone.Bucket,Weknow.EventSource.Backbone.EventBucketCategories,Weknow.EventSource.Backbone.Metadata,System.Threading.CancellationToken)">
            <summary>
            Saves the bucket information.
            </summary>
            <param name="id">The identifier.</param>
            <param name="bucket">Either Segments or Interceptions.</param>
            <param name="type">The type.</param>
            <param name="meta">The metadata.</param>
            <param name="cancellation">The cancellation.</param>
            <returns>
            Array of metadata entries which can be used by the consumer side storage strategy, in order to fetch the data.
            </returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.RedisProducerChannelBuilder.#ctor(Weknow.EventSource.Backbone.IProducerBuilder,Weknow.EventSource.Backbone.Channels.RedisProvider.RedisProducerChannel,Weknow.EventSource.Backbone.Building.IProducerOptionsBuilder)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="builder">The builder.</param>
            <param name="channel">The channel.</param>
            <param name="optionBuilder">The option builder.</param>
        </member>
        <member name="M:Weknow.EventSource.Backbone.RedisProducerChannelBuilder.Weknow#EventSource#Backbone#IProducerStoreStrategyBuilder#AddStorageStrategy(Weknow.EventSource.Backbone.IProducerStorageStrategy,Weknow.EventSource.Backbone.EventBucketCategories,System.Predicate{System.String})">
            <summary>
            Adds the storage strategy (Segment / Interceptions).
            Will use default storage (REDIS Hash) when empty.
            When adding more than one it will to all, act as a fall-back (first win, can use for caching).
            It important the consumer's storage will be in sync with this setting.
            </summary>
            <param name="storageStrategy">Storage strategy provider.</param>
            <param name="targetType">Type of the target.</param>
            <param name="filter">The filter of which keys in the bucket will be store into this storage.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.RedisProducerChannelBuilder.Weknow#EventSource#Backbone#IProducerPartitionBuilder#Partition(System.String)">
            <summary>
            Partition key represent logical group of
            event source shards.
            For example assuming each ORDERING flow can have its
            own messaging sequence, yet can live concurrency with
            other ORDER's sequences.
            The partition will let consumer the option to be notify and
            consume multiple shards from single consumer.
            This way the consumer can handle all orders in
            central place without affecting sequence of specific order
            flow or limiting the throughput.
            </summary>
            <param name="partition">The partition key.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.RedisProducerChannelBuilder.Weknow#EventSource#Backbone#Building#IProducerOptionsBuilder#WithOptions(Weknow.EventSource.Backbone.IEventSourceOptions)">
            <summary>
            Apply configuration.
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.RedisProviderExtensions.UseRedisProducerChannel(Weknow.EventSource.Backbone.IProducerBuilder,System.Threading.CancellationToken,Microsoft.Extensions.Logging.ILogger,System.Action{StackExchange.Redis.ConfigurationOptions},Polly.AsyncPolicy,System.String,System.String)">
            <summary>
            Uses REDIS producer channel.
            </summary>
            <param name="builder">The builder.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="logger">The logger.</param>
            <param name="configuration">The configuration.</param>
            <param name="resiliencePolicy">The resilience policy.</param>
            <param name="endpointEnvKey">The endpoint env key.</param>
            <param name="passwordEnvKey">The password env key.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Weknow.EventSource.Backbone.RedisProviderExtensions.UseRedisProducerChannel(Weknow.EventSource.Backbone.IProducerBuilder,Microsoft.Extensions.Logging.ILogger,System.Action{StackExchange.Redis.ConfigurationOptions},Polly.AsyncPolicy,System.Threading.CancellationToken,System.String,System.String)">
            <summary>
            Uses REDIS producer channel.
            </summary>
            <param name="builder">The builder.</param>
            <param name="logger">The logger.</param>
            <param name="configuration">The configuration.</param>
            <param name="resiliencePolicy">The resilience policy.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="endpointEnvKey">The endpoint env key.</param>
            <param name="passwordEnvKey">The password env key.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
    </members>
</doc>
