<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Weknow.EventSource.Backbone.Channels.S3StoreConsumerProvider</name>
    </assembly>
    <members>
        <member name="T:Weknow.EventSource.Backbone.S3ConsumerStorageStrategy">
            <summary>
            Responsible to load information from S3 storage.
            The information can be either Segmentation or Interception.
            When adding it via the builder it can be arrange in a chain in order of having
            'Chain of Responsibility' for saving different parts into different storage (For example GDPR's PII).
            Alternative, chain can serve as a cache layer.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.S3ConsumerStorageStrategy.#ctor(Weknow.EventSource.Backbone.Channels.IS3Repository)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="s3Repository">S3 repository.
            Use S3Factory in order to create it (will create one if missing).
            S3Factory will read credentials from the following environment variables: "S3_ACCESS_KEY", "S3_SECRET", "S3_REGION".</param>
        </member>
        <member name="M:Weknow.EventSource.Backbone.S3ConsumerStorageStrategy.#ctor(Microsoft.Extensions.Logging.ILogger,System.String,System.String,Weknow.EventSource.Backbone.Channels.IS3RepositoryFactory)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="logger">The logger.</param>
            <param name="bucket">The bucket.</param>
            <param name="basePath">The base path.</param>
            <param name="factory">The repository's factory.</param>
        </member>
        <member name="M:Weknow.EventSource.Backbone.S3ConsumerStorageStrategy.Weknow#EventSource#Backbone#IConsumerStorageStrategy#LoadBucketAsync(Weknow.EventSource.Backbone.Metadata,Weknow.EventSource.Backbone.Bucket,Weknow.EventSource.Backbone.EventBucketCategories,System.Func{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Load the bucket information.
            </summary>
            <param name="id">The identifier.</param>
            <param name="prevBucket">The current bucket (previous item in the chain).</param>
            <param name="type">The type of the storage.</param>
            <param name="meta">The meta fetch provider.</param>
            <param name="getProperty">The get property.</param>
            <param name="cancellation">The cancellation.</param>
            <returns>
            Either Segments or Interceptions.
            </returns>
        </member>
    </members>
</doc>
