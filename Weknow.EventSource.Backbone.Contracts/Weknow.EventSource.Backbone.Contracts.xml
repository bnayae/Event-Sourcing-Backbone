<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Weknow.EventSource.Backbone.Contracts</name>
    </assembly>
    <members>
        <member name="F:Weknow.EventSource.Backbone.Bucket.Empty">
            <summary>
            Empty
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Bucket.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Weknow.EventSource.Backbone.Bucket"/> class from being created.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Bucket.#ctor(System.Collections.Immutable.ImmutableDictionary{System.String,System.ReadOnlyMemory{System.Byte}})">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Bucket.Add(System.String,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Adds an element with the specified key and value to the bucket.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Bucket.AddRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.Byte[]}})">
            <summary>
            Adds an elements with the specified key and value to the bucket.
            </summary>
            <param name="pairs"></param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Bucket.AddRange(Weknow.EventSource.Backbone.Bucket)">
            <summary>
            Adds the specified key/value pairs to the bucket.
            </summary>
            <param name="bucket">The bucket.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Bucket.TryAddRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.Byte[]}})">
            <summary>
            Adds an elements with the specified key and value to the bucket if the key doesn't exists.
            </summary>
            <param name="pairs"></param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Bucket.TryAddRange(Weknow.EventSource.Backbone.Bucket)">
            <summary>
            Adds the specified key/value pairs to the bucket if the key doesn't exists.
            </summary>
            <param name="bucket">The bucket.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Bucket.RemoveRange(System.String[])">
            <summary>
            Removes keys from the bucket.
            </summary>
            <param name="keys">The keys.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Bucket.RemoveRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes keys from the bucket.
            </summary>
            <param name="keys">The keys.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Bucket.RemoveRange(System.Predicate{System.String})">
            <summary>
            Removes items from the bucket.
            </summary>
            <param name="filter">The filter by key.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Bucket.TryGetValue(System.String,System.ReadOnlyMemory{System.Byte}@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="P:Weknow.EventSource.Backbone.Bucket.Keys">
            <summary>
            Gets the keys.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Bucket.op_Implicit(System.Collections.Immutable.ImmutableDictionary{System.String,System.ReadOnlyMemory{System.Byte}})~Weknow.EventSource.Backbone.Bucket">
            <summary>
            Performs an implicit conversion.
            </summary>
            <param name="data">The data.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Bucket.op_Implicit(Weknow.EventSource.Backbone.Bucket)~System.Collections.Immutable.ImmutableDictionary{System.String,System.ReadOnlyMemory{System.Byte}}">
            <summary>
            Performs an implicit conversion.
            </summary>
            <param name="instance">The instance.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Bucket.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Bucket.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.Announcement">
            <summary>
            Non-generics form of announcement representation,
            used to transfer data via channels.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.Announcement.Metadata">
            <summary>
            Gets or sets the metadata.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.Announcement.Segments">
            <summary>
            Gets or sets the segments.
            Segmentation is done at the sending side, 
            by Segmentation provider which can be register in order
            to segments different parts of the messages.
            The motivation of segmentation can come from regulation like
            GDPR (right to erasure: https://gdpr-info.eu/).
            </summary>
            <example>
            Segmentation provider can split the message 
            into personal and non-personal segments.
            </example>
        </member>
        <member name="P:Weknow.EventSource.Backbone.Announcement.InterceptorsData">
            <summary>
            Interception data (each interceptor responsible of it own data).
            Interception can be use for variety of responsibilities like 
            flowing auth context or traces, producing metrics, etc.
            </summary>
        </member>
        <member name="T:Weknow.EventSource.Backbone.Metadata">
            <summary>
            <![CDATA[Represent metadata of announcement (event).
            This information is available via Metadata.Current 
            as long as the async-context exists.
            Recommended to materialize it before sending to queue and
            use Metadata.SetContext(metadata)
            </summary>
            <remarks>
            Unlike the segments, this part can be flow with
            message & will be set as async-context.]]> 
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.Metadata.MessageId">
            <summary>
            The message identifier.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.Metadata.ProducedAt">
            <summary>
            The sending time.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.Metadata.Operation">
            <summary>
            Gets or sets the operation.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.Metadata.Partition">
            <summary>
            Gets or sets the partition.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.Metadata.Shard">
            <summary>
            Gets or sets the shard.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.Metadata.ChannelType">
            <summary>
            Gets or sets the shard.
            </summary>
        </member>
        <member name="T:Weknow.EventSource.Backbone.MetadataExtensions">
            <summary>
            Metadata extensions
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.MetadataExtensions.Duration(Weknow.EventSource.Backbone.Metadata)">
            <summary>
            Calculation of Duration since produce time
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.MetadataExtensions.Key(Weknow.EventSource.Backbone.Metadata)">
            <summary>
            Gets the partition:shard as key.
            </summary>
        </member>
        <member name="T:Weknow.EventSource.Backbone.Private.EventSourceFallbakLogger">
            <summary>
            Best practice is to supply proper logger and 
            not using this class.Default logger.
            This class use Trace logger just in case the other logger is missing.
            </summary>
            <seealso cref="T:Microsoft.Extensions.Logging.ILogger" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Weknow.EventSource.Backbone.Private.EventSourceFallbakLogger.Default">
            <summary>
            The default
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Private.EventSourceFallbakLogger.BeginScope``1(``0)">
            <summary>
            Begins a logical operation scope.
            </summary>
            <typeparam name="TState">The type of the state to begin scope for.</typeparam>
            <param name="state">The identifier for the scope.</param>
            <returns>
            An <see cref="T:System.IDisposable" /> that ends the logical operation scope on dispose.
            </returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Private.EventSourceFallbakLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            Checks if the given <paramref name="logLevel" /> is enabled.
            </summary>
            <param name="logLevel">level to be checked.</param>
            <returns>
              <c>true</c> if enabled.
            </returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Private.EventSourceFallbakLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <summary>
            Writes a log entry.
            </summary>
            <typeparam name="TState">The type of the object to be written.</typeparam>
            <param name="logLevel">Entry will be written on this level.</param>
            <param name="eventId">Id of the event.</param>
            <param name="state">The entry to be written. Can be also an object.</param>
            <param name="exception">The exception related to this entry.</param>
            <param name="formatter">Function to create a <see cref="T:System.String" /> message of the <paramref name="state" /> and <paramref name="exception" />.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Private.EventSourceFallbakLogger.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.EventSourceOptions.#ctor(Weknow.EventSource.Backbone.IDataSerializer)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="P:Weknow.EventSource.Backbone.EventSourceOptions.Serializer">
            <summary>
            Gets the serializer.
            </summary>
        </member>
        <member name="T:Weknow.EventSource.Backbone.IDataSerializer">
            <summary>
            Enable to replace the default serialization
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.IDataSerializer.Serialize``1(``0)">
            <summary>
            Serialize item.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.IDataSerializer.Deserialize``1(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Deserialize  data.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializedData">The serialized data.</param>
            <returns></returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.IEventSourceOptions">
            <summary>
            options
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.IEventSourceOptions.Serializer">
            <summary>
            Gets the serializer.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.IInterceptorName.InterceptorName">
            <summary>
            Unique name which represent the correlation
            between the producer and consumer interceptor.
            It's recommended to use URL format.
            </summary>
        </member>
        <member name="T:Weknow.EventSource.Backbone.JsonDataSerializer">
            <summary>
            Json serializer (this is the default serializer)
            </summary>
            <seealso cref="T:Weknow.EventSource.Backbone.IDataSerializer" />
        </member>
    </members>
</doc>
