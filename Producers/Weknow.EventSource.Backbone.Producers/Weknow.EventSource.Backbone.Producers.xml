<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Weknow.EventSource.Backbone.Producers</name>
    </assembly>
    <members>
        <member name="T:Weknow.EventSource.Backbone.ProducerBuilder">
            <summary>
            Event Source producer builder.
            </summary>
        </member>
        <member name="F:Weknow.EventSource.Backbone.ProducerBuilder.Empty">
            <summary>
            Event Source producer builder.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ProducerBuilder.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ProducerBuilder.#ctor(Weknow.EventSource.Backbone.ProducerPlan)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="plan">The plan.</param>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ProducerBuilder.Plan">
            <summary>
            Gets the producer's plan.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ProducerBuilder.Weknow#EventSource#Backbone#IProducerBuilder#Merge(Weknow.EventSource.Backbone.Building.IProducerHooksBuilder,Weknow.EventSource.Backbone.Building.IProducerHooksBuilder,Weknow.EventSource.Backbone.Building.IProducerHooksBuilder[])">
            <summary>
            Merges multiple channels of same contract into single
            producer for broadcasting messages via all channels.
            </summary>
            <param name="first">The first channel.</param>
            <param name="second">The second channel.</param>
            <param name="others">The others channels.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ProducerBuilder.Weknow#EventSource#Backbone#IProducerBuilder#UseChannel(Weknow.EventSource.Backbone.IProducerChannelProvider)">
            <summary>
            Choose the communication channel provider.
            </summary>
            <param name="channel">The channel provider.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ProducerBuilder.Weknow#EventSource#Backbone#IProducerPartitionBuilder#Partition(System.String)">
            <summary>
            Partition key represent logical group of
            event source shards.
            For example assuming each ORDERING flow can have its
            own messaging sequence, yet can live concurrency with
            other ORDER's sequences.
            The partition will let consumer the option to be notify and
            consume multiple shards from single consumer.
            This way the consumer can handle all orders in
            central place without affecting sequence of specific order
            flow or limiting the throughput.
            </summary>
            <param name="partition">The partition key.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ProducerBuilder.Weknow#EventSource#Backbone#IProducerShardBuilder#Shard(System.String)">
            <summary>
            Shard key represent physical sequence.
            Use same shard when order is matter.
            For example: assuming each ORDERING flow can have its
            own messaging sequence, in this case you can split each
            ORDER into different shard and gain performance bust..
            </summary>
            <param name="shard">The shard key.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ProducerBuilder.Weknow#EventSource#Backbone#IProducerOptionsBuilder#WithOptions(Weknow.EventSource.Backbone.IEventSourceOptions)">
            <summary>
            Apply configuration.
            </summary>
            <param name="options"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ProducerBuilder.Weknow#EventSource#Backbone#Building#IProducerHooksBuilder#UseSegmentation(Weknow.EventSource.Backbone.IProducerAsyncSegmentationStrategy)">
            <summary>
            Register segmentation strategy,
            Segmentation responsible of splitting an instance into segments.
            Segments is how the producer sending its raw data to
            the consumer. It's in a form of dictionary when
            keys represent the different segments
            and the value represent serialized form of the segment's data.
            </summary>
            <param name="segmentationStrategy">A strategy of segmentation.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <example>
            Examples for segments can be driven from regulation like
            GDPR (personal, non-personal data),
            Technical vs Business aspects, etc.
            </example>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ProducerBuilder.Weknow#EventSource#Backbone#Building#IProducerHooksBuilder#UseSegmentation(Weknow.EventSource.Backbone.Building.IProducerSegmentationStrategy)">
            <summary>
            Register segmentation strategy,
            Segmentation responsible of splitting an instance into segments.
            Segments is how the producer sending its raw data to
            the consumer. It's in a form of dictionary when
            keys represent the different segments
            and the value represent serialized form of the segment's data.
            </summary>
            <param name="segmentationStrategy">A strategy of segmentation.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <example>
            Examples for segments can be driven from regulation like
            GDPR (personal, non-personal data),
            Technical vs Business aspects, etc.
            </example>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ProducerBuilder.Weknow#EventSource#Backbone#Building#IProducerHooksBuilder#AddInterceptor(Weknow.EventSource.Backbone.IProducerInterceptor)">
            <summary>
            Adds Producer interceptor (stage = after serialization).
            </summary>
            <param name="interceptor">The interceptor.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ProducerBuilder.Weknow#EventSource#Backbone#Building#IProducerHooksBuilder#AddInterceptor(Weknow.EventSource.Backbone.IProducerAsyncInterceptor)">
            <summary>
            Adds Producer interceptor (Timing: after serialization).
            </summary>
            <param name="interceptor">The interceptor.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ProducerBuilder.Weknow#EventSource#Backbone#Building#IProducerSpecializeBuilder#Build``1">
            <summary>
            <![CDATA[ Ceate Producer proxy for specific events sequence.
            Event sequence define by an interface which declare the
            operations which in time will be serialized into event's
            messages.
            This interface can be use as a proxy in the producer side,
            and as adapter on the consumer side.
            All method of the interface should represent one-way communication pattern
            and return Task or ValueTask (not Task<T> or ValueTask<T>).
            Nothing but method allowed on this interface]]>
            </summary>
            <typeparam name="T">The contract of the proxy / adapter</typeparam>
            <returns></returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.ProducerPipeline">
            <summary>
            Handle the producing pipeline
            CodeGenerator : generate class which inherit from ProducerPipeline
            ---------- ProducerPipeline - pipeline which invoke on each call  -----------
                     classify-commands = 
                        parameters.Select
                            CreateClassificationAdaptor(operation, argumentName, producedData)
                                return ClassifyArgumentAsync
                     SendAsync(operation, classifyAdaptors) // recursive
                        Channel.SendAsync(announcement)
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ProducerPipeline.#ctor(Weknow.EventSource.Backbone.ProducerPlan)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="plan">The plan.</param>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ProducerPipeline.CreateClassificationAdaptor``1(System.String,System.String,``0)">
            <summary>
            Classify the operation payload from method arguments.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="operation">The operation.</param>
            <param name="argumentName">Name of the argument.</param>
            <param name="producedData">The produced data.</param>
            <returns></returns>
            <remarks>
            MUST BE PROTECTED, called from the generated code
            </remarks>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ProducerPipeline.ClassifyArgumentAsync``1(Weknow.EventSource.Backbone.ProducerPlan,Weknow.EventSource.Backbone.Bucket,System.String,System.String,``0)">
            <summary>
            Classifies the operation's argument.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="plan">The plan.</param>
            <param name="payload">The payload.</param>
            <param name="operation">The operation.</param>
            <param name="argumentName">Name of the argument.</param>
            <param name="producedData">The produced data.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ProducerPipeline.ClassifyArgumentAsync``1(Weknow.EventSource.Backbone.IProducerAsyncSegmentationStrategy,Weknow.EventSource.Backbone.IEventSourceOptions,System.String,System.String,``0)">
            <summary>
            Bridge classification of single operation's argument.
            Get the argument data and pass it to the segmentation strategies.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="strategy">The strategy.</param>
            <param name="options">The options.</param>
            <param name="operation">The operation.</param>
            <param name="argumentName">Name of the argument.</param>
            <param name="producedData">The produced data.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ProducerPipeline.InterceptAsync(System.Collections.Generic.IEnumerable{Weknow.EventSource.Backbone.IProducerAsyncInterceptor},Weknow.EventSource.Backbone.Metadata,Weknow.EventSource.Backbone.Bucket,Weknow.EventSource.Backbone.Bucket)">
            <summary>
            Call interceptors and store their intercepted data
            (which will be use by the consumer's interceptors).
            </summary>
            <param name="interceptors">The interceptors.</param>
            <param name="metadata">The metadata.</param>
            <param name="payload">The payload.</param>
            <param name="interceptorsData">The interceptors data.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ProducerPipeline.SendAsync(System.String,System.Func{Weknow.EventSource.Backbone.ProducerPlan,Weknow.EventSource.Backbone.Bucket,System.Threading.Tasks.ValueTask{Weknow.EventSource.Backbone.Bucket}}[])">
            <summary>
            Sends the produced data via the channel.
            </summary>
            <param name="operation">The operation.</param>
            <param name="classifyAdaptors">The classify strategy adaptors.</param>
            <returns></returns>
            <remarks>
            MUST BE PROTECTED, called from the generated code
            </remarks>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ProducerPipeline.SendAsync(Weknow.EventSource.Backbone.ProducerPlan,System.String,Weknow.EventSource.Backbone.Bucket,Weknow.EventSource.Backbone.Bucket,System.String,System.Func{Weknow.EventSource.Backbone.ProducerPlan,Weknow.EventSource.Backbone.Bucket,System.Threading.Tasks.ValueTask{Weknow.EventSource.Backbone.Bucket}}[])">
            <summary>
            Sends the produced data via the channel.
            </summary>
            <param name="plan">The plan.</param>
            <param name="id">The identifier.</param>
            <param name="payload">The payload.</param>
            <param name="interceptorsData">The interceptors data.</param>
            <param name="operation">The operation.</param>
            <param name="classifyAdaptors">The classify strategy adaptors.</param>
            <returns></returns>
        </member>
    </members>
</doc>
