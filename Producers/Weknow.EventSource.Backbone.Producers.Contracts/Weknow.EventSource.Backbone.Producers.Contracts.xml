<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Weknow.EventSource.Backbone.Producers.Contracts</name>
    </assembly>
    <members>
        <member name="T:Weknow.EventSource.Backbone.Building.IProducerEnvironmentBuilder">
            <summary>
            Origin environment of the message
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.IProducerEnvironmentBuilder.Environment(System.String)">
            <summary>
            Origin environment of the message
            </summary>
            <param name="environment">The environment.</param>
            <returns></returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.Building.IProducerHooksBuilder">
            <summary>
            Event Source producer builder.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.Building.IProducerHooksBuilder.Plan">
            <summary>
            Gets the producer's plan.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.IProducerHooksBuilder.AddInterceptor(Weknow.EventSource.Backbone.IProducerInterceptor)">
            <summary>
            Adds Producer interceptor (stage = after serialization).
            </summary>
            <param name="interceptor">The interceptor.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.IProducerHooksBuilder.AddInterceptor(Weknow.EventSource.Backbone.IProducerAsyncInterceptor)">
            <summary>
            Adds Producer interceptor (Timing: after serialization).
            </summary>
            <param name="interceptor">The interceptor.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.IProducerHooksBuilder.UseSegmentation(Weknow.EventSource.Backbone.IProducerAsyncSegmentationStrategy)">
            <summary>
            Register segmentation strategy,
            Segmentation responsible of splitting an instance into segments.
            Segments is how the producer sending its raw data to
            the consumer. It's in a form of dictionary when
            keys represent the different segments
            and the value represent serialized form of the segment's data.
            </summary>
            <param name="segmentationStrategy">A strategy of segmentation.</param>
            <returns></returns>
            <example>
            Examples for segments can be driven from regulation like
            GDPR (personal, non-personal data),
            Technical vs Business aspects, etc.
            </example>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.IProducerHooksBuilder.UseSegmentation(Weknow.EventSource.Backbone.Building.IProducerSegmentationStrategy)">
            <summary>
            Register segmentation strategy,
            Segmentation responsible of splitting an instance into segments.
            Segments is how the producer sending its raw data to
            the consumer. It's in a form of dictionary when
            keys represent the different segments
            and the value represent serialized form of the segment's data.
            </summary>
            <param name="segmentationStrategy">A strategy of segmentation.</param>
            <returns></returns>
            <example>
            Examples for segments can be driven from regulation like
            GDPR (personal, non-personal data),
            Technical vs Business aspects, etc.
            </example>
        </member>
        <member name="T:Weknow.EventSource.Backbone.Building.IProducerLoggerBuilder">
            <summary>
            Event Source producer builder.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.IProducerLoggerBuilder.WithLogger(Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Attach logger.
            </summary>
            <param name="logger">The logger.</param>
            <returns></returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.Building.IProducerOptionsBuilder">
            <summary>
            Enable configuration.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.IProducerOptionsBuilder.WithOptions(Weknow.EventSource.Backbone.EventSourceOptions)">
            <summary>
            Apply configuration.
            </summary>
        </member>
        <member name="T:Weknow.EventSource.Backbone.Building.IProducerPartitionBuilder">
            <summary>
            Partition key represent logical group
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.IProducerPartitionBuilder.Partition(System.String)">
            <summary>
            Partition key represent logical group of 
            event source shards.
            For example assuming each ORDERING flow can have its 
            own messaging sequence, yet can live concurrency with 
            other ORDER's sequences.
            The partition will let consumer the option to be notify and
            consume multiple shards from single consumer.
            This way the consumer can handle all orders in
            central place without affecting sequence of specific order 
            flow or limiting the throughput.
            </summary>
            <param name="partition">The partition key.</param>
            <returns></returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.Building.IProducerShardBuilder">
            <summary>
            Enable configuration.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.IProducerShardBuilder.Shard(System.String)">
            <summary>
            Shard key represent physical sequence.
            Use same shard when order is matter.
            For example: assuming each ORDERING flow can have its 
            own messaging sequence, in this case you can split each 
            ORDER into different shard and gain performance bust..
            </summary>
            <param name="shard">The shard key.</param>
            <returns></returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.Building.IProducerSpecializeBuilder">
            <summary>
            Event Source producer builder.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.IProducerSpecializeBuilder.Build``1(System.Func{Weknow.EventSource.Backbone.IProducerPlan,``0})">
            <summary>
            <![CDATA[ Ceate Producer proxy for specific events sequence.
            Event sequence define by an interface which declare the
            operations which in time will be serialized into event's
            messages.
            This interface can be use as a proxy in the producer side,
            and as adapter on the consumer side.
            All method of the interface should represent one-way communication pattern
            and return Task or ValueTask (not Task<T> or ValueTask<T>).
            Nothing but method allowed on this interface]]>
            </summary>
            <typeparam name="T">The contract of the proxy / adapter</typeparam>
            <param name="factory">The factory.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.IProducerSpecializeBuilder.Override``1">
            <summary>
            Enable dynamic transformation of the stream id before sending.
            Can use for scenario like routing between environment like dev vs. prod or aws vs azure.
            </summary>
        </member>
        <member name="T:Weknow.EventSource.Backbone.Building.ProducerInterceptorBridge">
            <summary>
            Bridge segmentation
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.ProducerInterceptorBridge.#ctor(Weknow.EventSource.Backbone.IProducerInterceptor)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="sync">The synchronize.</param>
        </member>
        <member name="P:Weknow.EventSource.Backbone.Building.ProducerInterceptorBridge.Weknow#EventSource#Backbone#IInterceptorName#InterceptorName">
            <summary>
            Unique name which represent the correlation
            between the producer and consumer interceptor.
            It's recommended to use URL format.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.ProducerInterceptorBridge.Weknow#EventSource#Backbone#IProducerAsyncInterceptor#InterceptAsync(Weknow.EventSource.Backbone.Metadata,Weknow.EventSource.Backbone.Bucket)">
            <summary>
            Interception operation.
            </summary>
            <param name="metadata">The metadata.</param>
            <param name="segments">The segments.</param>
            <returns>
            Data which will be available to the
            consumer stage of the interception.
            </returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.Building.IProducerSegmentationStrategy">
            <summary>
            Responsible of splitting an instance into segments.
            Segments is how the producer sending its raw data to 
            the consumer. It's in a form of dictionary when 
            keys represent the different segments 
            and the value represent serialized form of the segment's data.
            </summary>
            <example>
            Examples for segments can be driven from regulation like
            GDPR (personal, non-personal data),
            Technical vs Business aspects, etc.
            </example>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.IProducerSegmentationStrategy.Classify``1(Weknow.EventSource.Backbone.Bucket,System.String,System.String,``0,Weknow.EventSource.Backbone.EventSourceOptions)">
            <summary>
            Classifies instance into different segments.
            Segments is how the producer sending its raw data to
            the consumer. It's in a form of dictionary when
            keys represent the different segments
            and the value represent serialized form of the segment's data.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="segments">The segments which was collect so far.
            It start as Empty and flow though all the registered segmentation strategies.</param>
            <param name="operation">The operation's key which represent the method call at the
            producer proxy.
            This way you can segment same type into different slot.</param>
            <param name="argumentName">Name of the argument.</param>
            <param name="producedData">The produced data.</param>
            <param name="options">The options.</param>
            <returns>
            bytes for each segment or
            Empty if don't responsible for segmentation of the type.
            </returns>
            <example>
            Examples for segments can be driven from regulation like
            GDPR (personal, non-personal data),
            Technical vs Business aspects, etc.
            </example>
        </member>
        <member name="T:Weknow.EventSource.Backbone.Building.ProducerSegmentationStrategyBridge">
            <summary>
            Bridge segmentation
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.ProducerSegmentationStrategyBridge.#ctor(Weknow.EventSource.Backbone.Building.IProducerSegmentationStrategy)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="sync">The synchronize.</param>
        </member>
        <member name="M:Weknow.EventSource.Backbone.Building.ProducerSegmentationStrategyBridge.Weknow#EventSource#Backbone#IProducerAsyncSegmentationStrategy#TryClassifyAsync``1(Weknow.EventSource.Backbone.Bucket,System.String,System.String,``0,Weknow.EventSource.Backbone.EventSourceOptions)">
            <summary>
            Try to classifies instance into different segments.
            Segments is how the producer sending its raw data to
            the consumer. It's in a form of dictionary when
            keys represent the different segments
            and the value represent serialized form of the segment's data.
            EXPECTED to return the segments argument if it not responsible of
            specific parameter handling.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="segments">The segments which was collect so far.
            It start as Empty and flow though all the registered segmentation strategies.</param>
            <param name="operation">The operation's key which represent the method call at the
            producer proxy.
            This way you can segment same type into different slot.</param>
            <param name="argumentName">Name of the argument.</param>
            <param name="producedData">The produced data.</param>
            <param name="options">The options.</param>
            <returns>
            bytes for each segment or
            the segments argument if don't responsible for segmentation of the type.
            </returns>
            <example>
            Examples for segments can be driven from regulation like
            GDPR (personal, non-personal data),
            Technical vs Business aspects, etc.
            </example>
        </member>
        <member name="T:Weknow.EventSource.Backbone.IProducerStorageStrategyWithFilter">
            <summary>
            Responsible to save information to storage.
            The information can be either Segmentation or Interception.
            When adding it via the builder it can be arrange in a chain in order of having
            'Chain of Responsibility' for saving different parts into different storage (For example GDPR's PII).
            Alternative, chain can serve as a cache layer.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.IProducerStorageStrategyWithFilter.IsOfTargetType(Weknow.EventSource.Backbone.EventBucketCategories)">
            <summary>
            Determines whether is of the right target type.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="T:Weknow.EventSource.Backbone.IProducerStoreStrategyBuilder">
            <summary>
            Enable configuration.
            </summary>
            <seealso cref="T:Weknow.EventSource.Backbone.Building.IProducerOptionsBuilder" />
        </member>
        <member name="M:Weknow.EventSource.Backbone.IProducerStoreStrategyBuilder.AddStorageStrategy(System.Func{Microsoft.Extensions.Logging.ILogger,System.Threading.Tasks.ValueTask{Weknow.EventSource.Backbone.IProducerStorageStrategy}},Weknow.EventSource.Backbone.EventBucketCategories,System.Predicate{System.String})">
            <summary>
            Adds the storage strategy (Segment / Interceptions).
            Will use default storage (REDIS Hash) when empty.
            When adding more than one it will to all, act as a fall-back (first win, can use for caching).
            It important the consumer's storage will be in sync with this setting.
            </summary>
            <param name="storageStrategy">Storage strategy provider.</param>
            <param name="targetType">Type of the target.</param>
            <param name="filter">The filter of which keys in the bucket will be store into this storage.</param>
            <returns></returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.IProducerOverrideBuildBuilder`1">
            <summary>
            Enable dynamic transformation of the stream id before sending.
            Can use for scenario like routing between environment like dev vs. prod or aws vs azure.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.IProducerOverrideBuildBuilder`1.Build(System.Func{Weknow.EventSource.Backbone.IProducerPlan,`0})">
            <summary>
            <![CDATA[ Ceate Producer proxy for specific events sequence.
            Event sequence define by an interface which declare the
            operations which in time will be serialized into event's
            messages.
            This interface can be use as a proxy in the producer side,
            and as adapter on the consumer side.
            All method of the interface should represent one-way communication pattern
            and return Task or ValueTask (not Task<T> or ValueTask<T>).
            Nothing but method allowed on this interface]]>
            </summary>
            <param name="factory">The factory.</param>
            <returns></returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.IProducerOverrideBuilder`1">
            <summary>
            Enable dynamic transformation of the stream id before sending.
            Can use for scenario like routing between environment like dev vs. prod or aws vs azure.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.IProducerOverrideBuilder`1.Strategy(System.Func{Weknow.EventSource.Backbone.IProducerPlanRoute,System.ValueTuple{System.String,System.String,System.String}})">
            <summary>
            Dynamic override of the stream id before sending.
            Can use for scenario like routing between environment like dev vs. prod or aws vs azure.
            </summary>
            <param name="routeStrategy">The routing strategy.</param>
            <returns></returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.IProducerOverrideEnvironmentBuilder`1">
            <summary>
            Enable dynamic transformation of the stream id before sending.
            Can use for scenario like routing between environment like dev vs. prod or aws vs azure.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.IProducerOverrideEnvironmentBuilder`1.Environment(System.String)">
            <summary>
            Override the environment.
            Can use for scenario like routing between environment like dev vs. prod or aws vs azure.
            </summary>
            <param name="environment">The environment.</param>
            <returns></returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.IProducerOverridePartitionBuilder`1">
            <summary>
            Enable dynamic transformation of the stream id before sending.
            Can use for scenario like routing between environment like dev vs. prod or aws vs azure.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.IProducerOverridePartitionBuilder`1.Partition(System.String,Weknow.EventSource.Backbone.RouteAssignmentType)">
            <summary>
            Override the partition.
            Can use for scenario like routing between environment like dev vs. prod or aws vs azure.
            </summary>
            <param name="partition">The partition.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.IProducerOverrideShardBuilder`1">
            <summary>
            Enable dynamic transformation of the stream id before sending.
            Can use for scenario like routing between environment like dev vs. prod or aws vs azure.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.IProducerOverrideShardBuilder`1.Shard(System.String,Weknow.EventSource.Backbone.RouteAssignmentType)">
            <summary>
            Override the shard.
            Can use for scenario like routing between environment like dev vs. prod or aws vs azure.
            </summary>
            <param name="shard">The shard.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.RouteAssignmentType">
            <summary>
            the type of the routing assignment
            </summary>
        </member>
        <member name="T:Weknow.EventSource.Backbone.IProducerBuilder">
            <summary>
            Event Source producer builder.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.IProducerBuilder.UseChannel(System.Func{Microsoft.Extensions.Logging.ILogger,Weknow.EventSource.Backbone.IProducerChannelProvider})">
            <summary>
            Choose the communication channel provider.
            </summary>
            <param name="channel">The channel provider.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.IProducerBuilder.Merge(Weknow.EventSource.Backbone.Building.IProducerHooksBuilder,Weknow.EventSource.Backbone.Building.IProducerHooksBuilder,Weknow.EventSource.Backbone.Building.IProducerHooksBuilder[])">
            <summary>
            Merges multiple channels of same contract into single
            producer for broadcasting messages via all channels.
            </summary>
            <param name="first">The first channel.</param>
            <param name="second">The second channel.</param>
            <param name="others">The others channels.</param>
            <returns></returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.IProducerAsyncInterceptor">
            <summary>
            Producer stage of an interception operation provider.
            It can be use for variety of responsibilities like 
            flowing auth context or traces, producing metrics, etc.
            </summary>
            <seealso cref="T:Weknow.EventSource.Backbone.IInterceptorName" />
        </member>
        <member name="M:Weknow.EventSource.Backbone.IProducerAsyncInterceptor.InterceptAsync(Weknow.EventSource.Backbone.Metadata,Weknow.EventSource.Backbone.Bucket)">
            <summary>
            Interception operation.
            </summary>
            <param name="metadata">The metadata.</param>
            <param name="segments">The segments.</param>
            <returns>
            Data which will be available to the
            consumer stage of the interception.
            </returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.IProducerInterceptor">
            <summary>
            Producer stage of an interception operation provider.
            It can be use for variety of responsibilities like 
            flowing auth context or traces, producing metrics, etc.
            </summary>
            <seealso cref="T:Weknow.EventSource.Backbone.IInterceptorName" />
        </member>
        <member name="M:Weknow.EventSource.Backbone.IProducerInterceptor.Intercept(Weknow.EventSource.Backbone.Metadata)">
            <summary>
            Interception operation.
            </summary>
            <param name="metadata">The metadata.</param>
            <returns>Data which will be available to the 
            consumer stage of the interception.</returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.IProducerPlan">
            <summary>
            Plan contract
            </summary>
            <seealso cref="T:Weknow.EventSource.Backbone.IProducerPlanBase" />
        </member>
        <member name="P:Weknow.EventSource.Backbone.IProducerPlan.Channel">
            <summary>
            Gets the communication channel provider.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.IProducerPlan.StorageStrategiesAsync">
            <summary>
            Gets the storage strategy.
            By design the stream should hold minimal information while the main payload 
            is segmented and can stored outside of the stream.
            This pattern will help us to split data for different reasons, for example GDPR PII (personally identifiable information).
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.IProducerPlan.ForwardPlans">
            <summary>
            Gets the forwards pipelines.
            Result of merging multiple channels.
            </summary>
        </member>
        <member name="T:Weknow.EventSource.Backbone.IProducerPlanBase">
            <summary>
            common plan properties
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.IProducerPlanBase.Interceptors">
            <summary>
            Producer interceptors (Timing: after serialization).
            </summary>
            <value>
            The interceptors.
            </value>
        </member>
        <member name="P:Weknow.EventSource.Backbone.IProducerPlanBase.Logger">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.IProducerPlanBase.Options">
            <summary>
            Gets the configuration.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.IProducerPlanBase.SegmentationStrategies">
            <summary>
            Segmentation responsible of splitting an instance into segments.
            Segments is how the producer sending its raw data to
            the consumer. It's in a form of dictionary when
            keys represent the different segments
            and the value represent serialized form of the segment's data.
            </summary>
            <example>
            Examples for segments can be driven from regulation like
            GDPR (personal, non-personal data),
            Technical vs Business aspects, etc.
            </example>
        </member>
        <member name="T:Weknow.EventSource.Backbone.IProducerPlanBuilder">
            <summary>
            Plan builder contract
            </summary>
            <seealso cref="T:Weknow.EventSource.Backbone.IProducerPlanBase" />
        </member>
        <member name="P:Weknow.EventSource.Backbone.IProducerPlanBuilder.ChannelFactory">
            <summary>
            Gets the communication channel provider factory.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.IProducerPlanBuilder.StorageStrategyFactories">
            <summary>
            Gets the storage strategy.
            By design the stream should hold minimal information while the main payload 
            is segmented and can stored outside of the stream.
            This pattern will help us to split data for different reasons, for example GDPR PII (personally identifiable information).
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.IProducerPlanBuilder.Forwards">
            <summary>
            Gets the forwards pipelines.
            Result of merging multiple channels.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.IProducerPlanBuilder.Build">
            <summary>
            Buildings the plan.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.IProducerPlanRoute">
            <summary>
            common plan routing properties
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.IProducerPlanRoute.Environment">
            <summary>
            The origin environment of the message
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.IProducerPlanRoute.Partition">
            <summary>
            Partition key represent logical group of 
            event source shards.
            For example assuming each ORDERING flow can have its 
            own messaging sequence, yet can live concurrency with 
            other ORDER's sequences.
            The partition will let consumer the option to be notify and
            consume multiple shards from single consumer.
            This way the consumer can handle all orders in
            central place without affecting sequence of specific order 
            flow or limiting the throughput.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.IProducerPlanRoute.Shard">
            <summary>
            Shard key represent physical sequence.
            Use same shard when order is matter.
            For example: assuming each ORDERING flow can have its 
            own messaging sequence, in this case you can split each 
            ORDER into different shard and gain performance bust..
            </summary>
        </member>
        <member name="T:Weknow.EventSource.Backbone.ProducerPlan">
            <summary>
            Hold builder definitions.
            Define the consumer execution pipeline.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ProducerPlan.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ProducerPlan.#ctor(Weknow.EventSource.Backbone.ProducerPlan,System.Func{Microsoft.Extensions.Logging.ILogger,Weknow.EventSource.Backbone.IProducerChannelProvider},Weknow.EventSource.Backbone.IProducerChannelProvider,System.String,System.String,System.String,Microsoft.Extensions.Logging.ILogger,Weknow.EventSource.Backbone.EventSourceOptions,System.Collections.Immutable.IImmutableList{Weknow.EventSource.Backbone.IProducerAsyncSegmentationStrategy},System.Collections.Immutable.IImmutableList{Weknow.EventSource.Backbone.IProducerAsyncInterceptor},System.Collections.Immutable.IImmutableList{Weknow.EventSource.Backbone.Building.IProducerHooksBuilder},System.Collections.Immutable.IImmutableList{Weknow.EventSource.Backbone.Building.IProducerHooksBuilder},System.Collections.Immutable.IImmutableList{Weknow.EventSource.Backbone.IProducerPlan},System.Func{Microsoft.Extensions.Logging.ILogger,System.Threading.Tasks.Task{Weknow.EventSource.Backbone.IProducerStorageStrategyWithFilter}})">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="copyFrom">The copy from.</param>
            <param name="channelFactory">The channel.</param>
            <param name="channel">The channel.</param>
            <param name="environment">The environment.</param>
            <param name="partition">The partition.</param>
            <param name="shard">The shard.</param>
            <param name="logger">The logger.</param>
            <param name="options">The options.</param>
            <param name="segmentationStrategies">The segmentation strategies.</param>
            <param name="interceptors">The interceptors.</param>
            <param name="routes">The routes.</param>
            <param name="forwards">Result of merging multiple channels.</param>
            <param name="forwardPlans">The forward channels.</param>
            <param name="storageStrategyFactories">The storage strategy.</param>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ProducerPlan.ChannelFactory">
            <summary>
            Gets the communication channel provider.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ProducerPlan.Weknow#EventSource#Backbone#IProducerPlan#Channel">
            <summary>
            Gets the communication channel provider.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ProducerPlan.StorageStrategyFactories">
            <summary>
            Gets the storage strategy.
            By design the stream should hold minimal information while the main payload 
            is segmented and can stored outside of the stream.
            This pattern will help us to split data for different reasons, for example GDPR PII (personally identifiable information).
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ProducerPlan.StorageStrategiesAsync">
            <summary>
            Gets the storage strategy.
            By design the stream should hold minimal information while the main payload 
            is segmented and can stored outside of the stream.
            This pattern will help us to split data for different reasons, for example GDPR PII (personally identifiable information).
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ProducerPlan.Logger">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ProducerPlan.Environment">
            <summary>
            Origin environment of the message
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ProducerPlan.Partition">
            <summary>
            Partition key represent logical group of 
            event source shards.
            For example assuming each ORDERING flow can have its 
            own messaging sequence, yet can live concurrency with 
            other ORDER's sequences.
            The partition will let consumer the option to be notify and
            consume multiple shards from single consumer.
            This way the consumer can handle all orders in
            central place without affecting sequence of specific order 
            flow or limiting the throughput.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ProducerPlan.Shard">
            <summary>
            Shard key represent physical sequence.
            Use same shard when order is matter.
            For example: assuming each ORDERING flow can have its 
            own messaging sequence, in this case you can split each 
            ORDER into different shard and gain performance bust..
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ProducerPlan.Options">
            <summary>
            Gets the configuration.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ProducerPlan.SegmentationStrategies">
            <summary>
            Segmentation responsible of splitting an instance into segments.
            Segments is how the producer sending its raw data to
            the consumer. It's in a form of dictionary when
            keys represent the different segments
            and the value represent serialized form of the segment's data.
            </summary>
            <example>
            Examples for segments can be driven from regulation like
            GDPR (personal, non-personal data),
            Technical vs Business aspects, etc.
            </example>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ProducerPlan.Interceptors">
            <summary>
            Producer interceptors (Timing: after serialization).
            </summary>
            <value>
            The interceptors.
            </value>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ProducerPlan.Forwards">
            <summary>
            Gets the forwards pipelines.
            Result of merging multiple channels.
            </summary>
        </member>
        <member name="P:Weknow.EventSource.Backbone.ProducerPlan.Weknow#EventSource#Backbone#IProducerPlan#ForwardPlans">
            <summary>
            Gets the forwards pipelines.
            Result of merging multiple channels.
            </summary>
        </member>
        <member name="F:Weknow.EventSource.Backbone.ProducerPlan.Routes">
            <summary>
            Routes are sub-pipelines are results of merge operation
            which can split same payload into multiple partitions or shards.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ProducerPlan.UseChannel(System.Func{Microsoft.Extensions.Logging.ILogger,Weknow.EventSource.Backbone.IProducerChannelProvider})">
            <summary>
            Assign channel.
            </summary>
            <param name="channelFactory">The channel factory.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ProducerPlan.WithLogger(Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Attach logger.
            </summary>
            <param name="logger">The logger.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ProducerPlan.WithStorageStrategy(System.Func{Microsoft.Extensions.Logging.ILogger,System.Threading.Tasks.Task{Weknow.EventSource.Backbone.IProducerStorageStrategyWithFilter}})">
            <summary>
            Attach Storage Strategy.
            </summary>
            <param name="storageStrategy">The storage strategy.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ProducerPlan.WithOptions(Weknow.EventSource.Backbone.EventSourceOptions)">
            <summary>
            Withes the options.
            </summary>
            <param name="options">The options.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ProducerPlan.WithEnvironment(System.String,System.String,System.String,Weknow.EventSource.Backbone.RouteAssignmentType)">
            <summary>
            Withes the environment.
            </summary>
            <param name="environment">The environment.</param>
            <param name="partition">The partition.</param>
            <param name="shard">The shard.</param>
            <param name="type">The type (only for partition and shard).</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ProducerPlan.WithPartition(System.String,System.String,Weknow.EventSource.Backbone.RouteAssignmentType)">
            <summary>
            Withes the partition.
            </summary>
            <param name="partition">The partition.</param>
            <param name="shard">The shard.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ProducerPlan.WithShard(System.String,Weknow.EventSource.Backbone.RouteAssignmentType)">
            <summary>
            Withes the shard.
            </summary>
            <param name="shard">The shard.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ProducerPlan.AddRoute(Weknow.EventSource.Backbone.Building.IProducerHooksBuilder)">
            <summary>
            Adds the route.
            </summary>
            <param name="route">The route.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ProducerPlan.AddSegmentation(Weknow.EventSource.Backbone.IProducerAsyncSegmentationStrategy)">
            <summary>
            Adds the segmentation.
            </summary>
            <param name="segmentation">The segmentation.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ProducerPlan.AddInterceptor(Weknow.EventSource.Backbone.IProducerAsyncInterceptor)">
            <summary>
            Adds the interceptor.
            </summary>
            <param name="interceptor">The interceptor.</param>
            <returns></returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.ProducerPlan.NopChannel">
            <summary>
            Not operational channel
            </summary>
            <seealso cref="T:Weknow.EventSource.Backbone.IProducerChannelProvider" />
        </member>
        <member name="M:Weknow.EventSource.Backbone.ProducerPlan.Weknow#EventSource#Backbone#IProducerPlanBuilder#Build">
            <summary>
            Builds this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.ProducerPipeline">
            <summary>
            Handle the producing pipeline
            CodeGenerator : generate class which inherit from ProducerPipeline
            ---------- ProducerPipeline - pipeline which invoke on each call  -----------
                     classify-commands = 
                        parameters.Select
                            CreateClassificationAdaptor(operation, argumentName, producedData)
                                return ClassifyArgumentAsync
                     SendAsync(operation, classifyAdaptors) // recursive
                        Channel.SendAsync(announcement)
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ProducerPipeline.#ctor(Weknow.EventSource.Backbone.IProducerPlanBuilder@)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="plan">The plan.</param>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ProducerPipeline.#ctor(Weknow.EventSource.Backbone.IProducerPlan)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="plan">The plan.</param>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ProducerPipeline.CreateClassificationAdaptor``1(System.String,System.String,``0)">
            <summary>
            Classify the operation payload from method arguments.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="operation">The operation.</param>
            <param name="argumentName">Name of the argument.</param>
            <param name="producedData">The produced data.</param>
            <returns></returns>
            <remarks>
            MUST BE PROTECTED, called from the generated code
            </remarks>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ProducerPipeline.ClassifyArgumentAsync``1(Weknow.EventSource.Backbone.IProducerPlan,Weknow.EventSource.Backbone.Bucket,System.String,System.String,``0)">
            <summary>
            Classifies the operation's argument.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="plan">The plan.</param>
            <param name="payload">The payload.</param>
            <param name="operation">The operation.</param>
            <param name="argumentName">Name of the argument.</param>
            <param name="producedData">The produced data.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ProducerPipeline.ClassifyArgumentAsync``1(Weknow.EventSource.Backbone.IProducerAsyncSegmentationStrategy,Weknow.EventSource.Backbone.EventSourceOptions,System.String,System.String,``0)">
            <summary>
            Bridge classification of single operation's argument.
            Get the argument data and pass it to the segmentation strategies.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="strategy">The strategy.</param>
            <param name="options">The options.</param>
            <param name="operation">The operation.</param>
            <param name="argumentName">Name of the argument.</param>
            <param name="producedData">The produced data.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ProducerPipeline.InterceptAsync(System.Collections.Generic.IEnumerable{Weknow.EventSource.Backbone.IProducerAsyncInterceptor},Weknow.EventSource.Backbone.Metadata,Weknow.EventSource.Backbone.Bucket,Weknow.EventSource.Backbone.Bucket)">
            <summary>
            Call interceptors and store their intercepted data
            (which will be use by the consumer's interceptors).
            </summary>
            <param name="interceptors">The interceptors.</param>
            <param name="metadata">The metadata.</param>
            <param name="payload">The payload.</param>
            <param name="interceptorsData">The interceptors data.</param>
            <returns></returns>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ProducerPipeline.SendAsync(System.String,System.Func{Weknow.EventSource.Backbone.IProducerPlan,Weknow.EventSource.Backbone.Bucket,System.Threading.Tasks.ValueTask{Weknow.EventSource.Backbone.Bucket}}[])">
            <summary>
            Sends the produced data via the channel.
            </summary>
            <param name="operation">The operation.</param>
            <param name="classifyAdaptors">The classify strategy adaptors.</param>
            <returns></returns>
            <remarks>
            MUST BE PROTECTED, called from the generated code
            </remarks>
        </member>
        <member name="M:Weknow.EventSource.Backbone.ProducerPipeline.SendAsync(Weknow.EventSource.Backbone.IProducerPlan,System.String,Weknow.EventSource.Backbone.Bucket,Weknow.EventSource.Backbone.Bucket,System.String,System.Func{Weknow.EventSource.Backbone.IProducerPlan,Weknow.EventSource.Backbone.Bucket,System.Threading.Tasks.ValueTask{Weknow.EventSource.Backbone.Bucket}}[])">
            <summary>
            Sends the produced data via the channel.
            </summary>
            <param name="plan">The plan.</param>
            <param name="id">The identifier.</param>
            <param name="payload">The payload.</param>
            <param name="interceptorsData">The interceptors data.</param>
            <param name="operation">The operation.</param>
            <param name="classifyAdaptors">The classify strategy adaptors.</param>
            <returns></returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.IProducerChannelProvider">
            <summary>
            Channel provider responsible for passing the actual message 
            from producer to consumer. 
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.IProducerChannelProvider.SendAsync(Weknow.EventSource.Backbone.Announcement,System.Collections.Immutable.ImmutableArray{Weknow.EventSource.Backbone.IProducerStorageStrategyWithFilter})">
            <summary>
            Sends raw announcement.
            </summary>
            <param name="payload">The raw announcement data.</param>
            <param name="storageStrategy">The storage strategy.</param>
            <returns>
            Return the message id
            </returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.IProducerStorageStrategy">
            <summary>
            Responsible to save information to storage.
            The information can be either Segmentation or Interception.
            When adding it via the builder it can be arrange in a chain in order of having
            'Chain of Responsibility' for saving different parts into different storage (For example GDPR's PII).
            Alternative, chain can serve as a cache layer.
            </summary>
        </member>
        <member name="M:Weknow.EventSource.Backbone.IProducerStorageStrategy.SaveBucketAsync(System.String,Weknow.EventSource.Backbone.Bucket,Weknow.EventSource.Backbone.EventBucketCategories,Weknow.EventSource.Backbone.Metadata,System.Threading.CancellationToken)">
            <summary>
            Saves the bucket information.
            </summary>
            <param name="id">The identifier.</param>
            <param name="bucket">Either Segments or Interceptions.</param>
            <param name="type">The type.</param>
            <param name="meta">The metadata.</param>
            <param name="cancellation">The cancellation.</param>
            <returns>
            Array of metadata entries which can be used by the consumer side storage strategy, in order to fetch the data.
            </returns>
        </member>
        <member name="T:Weknow.EventSource.Backbone.IProducerAsyncSegmentationStrategy">
            <summary>
            Responsible of splitting an instance into segments.
            Segments is how the producer sending its raw data to 
            the consumer. It's in a form of dictionary when 
            keys represent the different segments 
            and the value represent serialized form of the segment's data.
            </summary>
            <example>
            Examples for segments can be driven from regulation like
            GDPR (personal, non-personal data),
            Technical vs Business aspects, etc.
            </example>
        </member>
        <member name="M:Weknow.EventSource.Backbone.IProducerAsyncSegmentationStrategy.TryClassifyAsync``1(Weknow.EventSource.Backbone.Bucket,System.String,System.String,``0,Weknow.EventSource.Backbone.EventSourceOptions)">
            <summary>
            Try to classifies instance into different segments.
            Segments is how the producer sending its raw data to
            the consumer. It's in a form of dictionary when
            keys represent the different segments
            and the value represent serialized form of the segment's data.
            EXPECTED to return the segments argument if it not responsible of 
            specific parameter handling.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="segments">The segments which was collect so far.
            It start as Empty and flow though all the registered segmentation strategies.</param>
            <param name="operation">The operation's key which represent the method call at the
            producer proxy.
            This way you can segment same type into different slot.</param>
            <param name="argumentName">Name of the argument.</param>
            <param name="producedData">The produced data.</param>
            <param name="options">The options.</param>
            <returns>
            bytes for each segment or
            the segments argument if don't responsible for segmentation of the type.
            </returns>
            <example>
            Examples for segments can be driven from regulation like
            GDPR (personal, non-personal data),
            Technical vs Business aspects, etc.
            </example>
        </member>
        <member name="M:Weknow.EventSource.Backbone.TelemetryrExtensions.InjectSpan``1(System.Diagnostics.Activity,Weknow.EventSource.Backbone.Metadata,System.Collections.Immutable.ImmutableArray{``0}.Builder,System.Action{System.Collections.Immutable.ImmutableArray{``0}.Builder,System.String,System.String})">
            <summary>
            Inject telemetry span to the channel property.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="activity">The activity.</param>
            <param name="meta">The meta.</param>
            <param name="entriesBuilder">The entries builder.</param>
            <param name="injectStrategy">The injection strategy.</param>
            <returns></returns>
        </member>
    </members>
</doc>
